<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zxh23682.github.io</id>
    <title>zxh23682 的博客</title>
    <updated>2021-01-05T11:12:12.732Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zxh23682.github.io"/>
    <link rel="self" href="https://zxh23682.github.io/atom.xml"/>
    <subtitle>一个蒟蒻OIer</subtitle>
    <logo>https://zxh23682.github.io/images/avatar.png</logo>
    <icon>https://zxh23682.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, zxh23682 的博客</rights>
    <entry>
        <title type="html"><![CDATA[题解 CF1453A 【Cancel the Trains】]]></title>
        <id>https://zxh23682.github.io/post/ti-jie-cf1453a-cancel-the-trains/</id>
        <link href="https://zxh23682.github.io/post/ti-jie-cf1453a-cancel-the-trains/">
        </link>
        <updated>2021-01-05T11:11:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题意">题意：</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 组数据。</p>
<p>每组数据中给定两个长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的数组，求它们中同时出现的数的个数。</p>
<h2 id="思路">思路：</h2>
<p>每次确定一个数组中的一个数，在另外一个数组中查找。</p>
<p><strong>多组测试数据，不要忘记清零。</strong></p>
<p>时间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。</p>
<h2 id="code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Code:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></h2>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int T;
int n,m;
int a[105],b[105];
int ans=0;
int k;
int main() {
	scanf(&quot;%d&quot;,&amp;T);
	while(T--) {
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		for (int i=1; i&lt;=n; i++) scanf(&quot;%d&quot;,&amp;a[i]);
		for (int j=1; j&lt;=m; j++) scanf(&quot;%d&quot;,&amp;b[j]);
		for (int i=1; i&lt;=n; i++) {
			k=a[i]; //确定一个数
			for (int j=1; j&lt;=m; j++) { //查找这个数
				if (b[j]==k) ans++;
			}
		}
		printf(&quot;%d\n&quot;,ans);
		ans=0; //清零
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【置顶】试炼场]]></title>
        <id>https://zxh23682.github.io/post/shi-lian-chang/</id>
        <link href="https://zxh23682.github.io/post/shi-lian-chang/">
        </link>
        <updated>2021-01-05T11:06:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="新手村">新手村</h1>
<p>任何一个伟大的目标，都有一个微不足道的开始。</p>
<h2 id="洛谷的第一个任务">洛谷的第一个任务</h2>
<p>勇敢的迈出第一步，了解下语言和洛谷。跟着书本和老师走，不会难的。</p>
<ul>
<li><a href="/problem/P1000">P1000</a></li>
<li><a href="/problem/P1001">P1001</a></li>
<li><a href="/problem/P1421">P1421</a></li>
<li><a href="/problem/P1425">P1425</a></li>
</ul>
<h2 id="顺序与分支">顺序与分支</h2>
<p>计算机的智能性开始得以体现，因为计算机能够根据不同的条件选择了。</p>
<ul>
<li><a href="/problem/P1422">P1422</a></li>
<li><a href="/problem/P1085">P1085</a></li>
<li><a href="/problem/P1089">P1089</a></li>
<li><a href="/problem/P1909">P1909</a></li>
</ul>
<h2 id="循环循环循环">循环！循环！循环！</h2>
<p>计算机最不怕的就是重复。你让它做10000次同样的事它也不怕啦，但是让他做1亿亿次的话……</p>
<ul>
<li><a href="/problem/P1008">P1008</a></li>
<li><a href="/problem/P1035">P1035</a></li>
<li><a href="/problem/P1423">P1423</a></li>
<li><a href="/problem/P1424">P1424</a></li>
<li><a href="/problem/P1980">P1980</a></li>
</ul>
<h2 id="数组">数组</h2>
<p>跟数组有关的题目基本上都要用到循环，所以请先完成1-3。</p>
<ul>
<li><a href="/problem/P1046">P1046</a></li>
<li><a href="/problem/P1047">P1047</a></li>
<li><a href="/problem/P1427">P1427</a></li>
<li><a href="/problem/P1428">P1428</a></li>
<li><a href="/problem/P2141">P2141</a></li>
<li><a href="/problem/P1567">P1567</a></li>
</ul>
<h2 id="简单字符串">简单字符串</h2>
<p>计算机不仅可以处理数字，还能处理文字！就是其实跟数字也没什么差。</p>
<ul>
<li><a href="/problem/P1055">P1055</a></li>
<li><a href="/problem/P1200">P1200</a></li>
<li><a href="/problem/P1308">P1308</a></li>
<li><a href="/problem/P1553">P1553</a></li>
<li><a href="/problem/P1598">P1598</a></li>
<li><a href="/problem/P1914">P1914</a></li>
</ul>
<h2 id="过程函数与递归">过程函数与递归</h2>
<p>将代码串进行打包，就是过程与函数。过程与函数调用自己则为递归。有一点小难但不要怕哦。</p>
<ul>
<li><a href="/problem/P1028">P1028</a></li>
<li><a href="/problem/P1036">P1036</a></li>
<li><a href="/problem/P1149">P1149</a></li>
<li><a href="/problem/P1217">P1217</a></li>
</ul>
<h2 id="boss战-入门综合练习1">BOSS战-入门综合练习1</h2>
<p>这里将前面的内容综合起来了，会有点难，不过你可以问老师同学，也能上网查资料。</p>
<ul>
<li><a href="/problem/P1478">P1478</a></li>
<li><a href="/problem/P1618">P1618</a></li>
<li><a href="/problem/P1579">P1579</a></li>
<li><a href="/problem/P2089">P2089</a></li>
</ul>
<h2 id="boss战-入门综合练习2">BOSS战-入门综合练习2</h2>
<p>勇士，竟然来到了BOSS的老巢！来一场恶斗，证明自己的实力，解锁下一个级别！</p>
<ul>
<li><a href="/problem/P1426">P1426</a></li>
<li><a href="/problem/P1464">P1464</a></li>
<li><a href="/problem/P1014">P1014</a></li>
<li><a href="/problem/P1022">P1022</a></li>
<li><a href="/problem/P1307">P1307</a></li>
</ul>
<h1 id="普及练习场">普及练习场</h1>
<p>普及组选手可冲刺训练，提高组选手亦可在此巩固基础。</p>
<h2 id="简单的模拟">简单的模拟</h2>
<p>开始普及组的训练！所谓模拟，就是直接根据题意编写，思维难度简单。</p>
<ul>
<li><a href="/problem/P1003">P1003</a></li>
<li><a href="/problem/P1067">P1067</a></li>
<li><a href="/problem/P1540">P1540</a></li>
<li><a href="/problem/P1056">P1056</a></li>
<li><a href="/problem/P1328">P1328</a></li>
<li><a href="/problem/P1563">P1563</a></li>
</ul>
<h2 id="交叉模拟">交叉模拟</h2>
<p>这里也是模拟，但是会混有些别的部分。思维难度不大，但是编写起来会有些难度。</p>
<ul>
<li><a href="/problem/P1023">P1023</a></li>
<li><a href="/problem/P1031">P1031</a></li>
<li><a href="/problem/P1042">P1042</a></li>
<li><a href="/problem/P1086">P1086</a></li>
<li><a href="/problem/P1098">P1098</a></li>
<li><a href="/problem/P3952">P3952</a></li>
</ul>
<h2 id="排序">排序</h2>
<p>将杂乱无章的数据变得有规律。有各种各样的排序算法，看情况使用。</p>
<ul>
<li><a href="/problem/P1177">P1177</a></li>
<li><a href="/problem/P1059">P1059</a></li>
<li><a href="/problem/P1068">P1068</a></li>
<li><a href="/problem/P1781">P1781</a></li>
</ul>
<h2 id="排序ex">排序Ex</h2>
<p>这里的排序就更上一层了。不仅融合了别的算法与技巧，排序本身也有各种花招。</p>
<ul>
<li><a href="/problem/P1583">P1583</a></li>
<li><a href="/problem/P1051">P1051</a></li>
<li><a href="/problem/P1093">P1093</a></li>
<li><a href="/problem/P1309">P1309</a></li>
</ul>
<h2 id="字符串处理">字符串处理</h2>
<p>这里的字符串处理还会变得更加的有意思，难度也更大。需要好好地思考一下。</p>
<ul>
<li><a href="/problem/P1603">P1603</a></li>
<li><a href="/problem/P1071">P1071</a></li>
<li><a href="/problem/P1012">P1012</a></li>
<li><a href="/problem/P1538">P1538</a></li>
</ul>
<h2 id="贪心">贪心</h2>
<p>贪心就是只考虑眼前的利益。对于我们人生来说太贪是不好的，不过oi中，有时是对的。</p>
<ul>
<li><a href="/problem/P1090">P1090</a></li>
<li><a href="/problem/P1181">P1181</a></li>
<li><a href="/problem/P1208">P1208</a></li>
<li><a href="/problem/P1223">P1223</a></li>
<li><a href="/problem/P1094">P1094</a></li>
<li><a href="/problem/P1803">P1803</a></li>
<li><a href="/problem/P1031">P1031</a></li>
<li><a href="/problem/P1080">P1080</a></li>
</ul>
<h2 id="深度优先搜索">深度优先搜索</h2>
<p>搜索可以穷举各种情况。很多题目都可以用搜索完成。就算不能，搜索也是骗分神器。</p>
<ul>
<li><a href="/problem/P1219">P1219</a></li>
<li><a href="/problem/P1019">P1019</a></li>
<li><a href="/problem/P1101">P1101</a></li>
<li><a href="/problem/P1605">P1605</a></li>
<li><a href="/problem/P1040">P1040</a></li>
<li><a href="/problem/P1092">P1092</a></li>
</ul>
<h2 id="广度优先搜索">广度优先搜索</h2>
<p>广度优先搜索可以用来找有关“最短步数”的问题。恩，也可以用来“地毯式搜索”。</p>
<ul>
<li><a href="/problem/P1162">P1162</a></li>
<li><a href="/problem/P1032">P1032</a></li>
<li><a href="/problem/P1141">P1141</a></li>
<li><a href="/problem/P1126">P1126</a></li>
<li><a href="/problem/P1443">P1443</a></li>
</ul>
<h2 id="带有技巧的搜索">带有技巧的搜索</h2>
<p>这里的搜索不仅包含了dfs和bfs，还包括剪枝、记录等技巧以加快速度。</p>
<ul>
<li><a href="/problem/P1118">P1118</a></li>
<li><a href="/problem/P1434">P1434</a></li>
<li><a href="/problem/P1433">P1433</a></li>
<li><a href="/problem/P1074">P1074</a></li>
</ul>
<h2 id="分治算法">分治算法</h2>
<p>将大问题拆分为小问题，分而治之，各个击破，然后在合并回来。</p>
<ul>
<li><a href="/problem/P1226">P1226</a></li>
<li><a href="/problem/P1010">P1010</a></li>
<li><a href="/problem/P1908">P1908</a></li>
<li><a href="/problem/P1498">P1498</a></li>
</ul>
<h2 id="简单数学问题">简单数学问题</h2>
<p>用计算机解决某些麻烦数学问题，再合适不过了。这真是绝妙的搭配啊！</p>
<ul>
<li><a href="/problem/P1088">P1088</a></li>
<li><a href="/problem/P1045">P1045</a></li>
<li><a href="/problem/P1403">P1403</a></li>
<li><a href="/problem/P1017">P1017</a></li>
<li><a href="/problem/P1147">P1147</a></li>
<li><a href="/problem/P1029">P1029</a></li>
</ul>
<h2 id="递推与递归二分">递推与递归二分</h2>
<p>递推，层层递进，由基础推向顶层。二分不仅可以用来查找数据，还可以确定最合适的值。</p>
<ul>
<li><a href="/problem/P1192">P1192</a></li>
<li><a href="/problem/P1025">P1025</a></li>
<li><a href="/problem/P1057">P1057</a></li>
<li><a href="/problem/P1135">P1135</a></li>
<li><a href="/problem/P1216">P1216</a></li>
<li><a href="/problem/P1182">P1182</a></li>
<li><a href="/problem/P1316">P1316</a></li>
</ul>
<h2 id="线性数据结构">线性数据结构</h2>
<p>数组，链表，队列，栈，都是线性结构。巧用这些结构可以做出不少方便的事情。</p>
<ul>
<li><a href="/problem/P1996">P1996</a></li>
<li><a href="/problem/P1115">P1115</a></li>
<li><a href="/problem/P1739">P1739</a></li>
<li><a href="/problem/P1160">P1160</a></li>
<li><a href="/problem/P1449">P1449</a></li>
</ul>
<h2 id="树形数据结构">树形数据结构</h2>
<p>由一个根节点分叉，越分越多，就成了树。树可以表示数据之间的从属关系</p>
<ul>
<li><a href="/problem/P1087">P1087</a></li>
<li><a href="/problem/P1030">P1030</a></li>
<li><a href="/problem/P1305">P1305</a></li>
<li><a href="/problem/P5018">P5018</a></li>
</ul>
<h2 id="动态规划的背包问题">动态规划的背包问题</h2>
<p>这是最基础的动态规划。不过如果是第一次接触会有些难以理解。加油闯过这个坎。</p>
<ul>
<li><a href="/problem/P1060">P1060</a></li>
<li><a href="/problem/P1164">P1164</a></li>
<li><a href="/problem/P1064">P1064</a></li>
<li><a href="/problem/P1048">P1048</a></li>
<li><a href="/problem/P1049">P1049</a></li>
<li><a href="/problem/P1616">P1616</a></li>
</ul>
<h2 id="线性动态规划">线性动态规划</h2>
<p>这也是基础的动态规划。是在线性结构上面的动态规划，一定要掌握。</p>
<ul>
<li><a href="/problem/P1020">P1020</a></li>
<li><a href="/problem/P1091">P1091</a></li>
<li><a href="/problem/P1280">P1280</a></li>
<li><a href="/problem/P1880">P1880</a></li>
<li><a href="/problem/P1140">P1140</a></li>
<li><a href="/problem/P1282">P1282</a></li>
</ul>
<h2 id="多维动态规划">多维动态规划</h2>
<p>这里的动态规划就不止一维了。不仅要小心时间复杂度，也要注意空间复杂度。</p>
<ul>
<li><a href="/problem/P1508">P1508</a></li>
<li><a href="/problem/P1006">P1006</a></li>
<li><a href="/problem/P1387">P1387</a></li>
<li><a href="/problem/P1417">P1417</a></li>
<li><a href="/problem/P1855">P1855</a></li>
<li><a href="/problem/P1736">P1736</a></li>
</ul>
<h2 id="更要技巧的动规与记忆化">更要技巧的动规与记忆化</h2>
<p>这边的题目有各种搞法。当然有的题目也可以使用记忆化搜索来降低思维难度。</p>
<ul>
<li><a href="/problem/P1064">P1064</a></li>
<li><a href="/problem/P1541">P1541</a></li>
<li><a href="/problem/P1026">P1026</a></li>
<li><a href="/problem/P1063">P1063</a></li>
<li><a href="/problem/P1156">P1156</a></li>
<li><a href="/problem/P1052">P1052</a></li>
</ul>
<h2 id="高精度算法">高精度算法</h2>
<p>就算是long long（或int64）还不够怎么办？用高精度算法。自己动手丰衣足食。</p>
<ul>
<li><a href="/problem/P1601">P1601</a></li>
<li><a href="/problem/P2142">P2142</a></li>
<li><a href="/problem/P1303">P1303</a></li>
<li><a href="/problem/P1255">P1255</a></li>
<li><a href="/problem/P1604">P1604</a></li>
</ul>
<h2 id="贪心ex">贪心EX</h2>
<p>虽然是贪心题，可能不是你当时你虐着玩的贪心惹qwq</p>
<ul>
<li><a href="/problem/P1080">P1080</a></li>
<li><a href="/problem/P1031">P1031</a></li>
<li><a href="/problem/P1233">P1233</a></li>
<li><a href="/problem/P2123">P2123</a></li>
</ul>
<h2 id="简单数学">简单数学</h2>
<p>数学和oi是密切相关的，数学不仅是oi的基础，而且是算法的核心。</p>
<ul>
<li><a href="/problem/P1865">P1865</a></li>
<li><a href="/problem/P1372">P1372</a></li>
<li><a href="/problem/P1338">P1338</a></li>
<li><a href="/problem/P2158">P2158</a></li>
<li><a href="/problem/P1582">P1582</a></li>
</ul>
<h2 id="boss战-普及综合练习1">BOSS战-普及综合练习1</h2>
<p>好不容易闯到这一关，你那还等什么呢？抄起家伙赶快上啊！</p>
<ul>
<li><a href="/problem/P1478">P1478</a></li>
<li><a href="/problem/P1203">P1203</a></li>
<li><a href="/problem/P1363">P1363</a></li>
<li><a href="/problem/P1736">P1736</a></li>
</ul>
<h2 id="boss战-普及综合练习2">BOSS战-普及综合练习2</h2>
<p>来搞定第二个BOSS。虽然战斗艰难，但你一定没有问题。</p>
<ul>
<li><a href="/problem/P1201">P1201</a></li>
<li><a href="/problem/P1095">P1095</a></li>
<li><a href="/problem/P1058">P1058</a></li>
<li><a href="/problem/P2258">P2258</a></li>
<li><a href="/problem/P1108">P1108</a></li>
</ul>
<h2 id="boss战-普及综合练习3">BOSS战-普及综合练习3</h2>
<p>普及练习场的大BOSS：“一定让你有去无回”。怎么办呢？只能打倒他开启下一个级别！</p>
<ul>
<li><a href="/problem/P1328">P1328</a></li>
<li><a href="/problem/P1062">P1062</a></li>
<li><a href="/problem/P1969">P1969</a></li>
<li><a href="/problem/P1037">P1037</a></li>
</ul>
<h2 id="普及常见模板">普及常见模板</h2>
<p>这里集中了比较基础的算法的模板。提高和省选也有模板题哦！</p>
<ul>
<li><a href="/problem/P1177">P1177</a></li>
<li><a href="/problem/P3366">P3366</a></li>
<li><a href="/problem/P3367">P3367</a></li>
<li><a href="/problem/P3371">P3371</a></li>
<li><a href="/problem/P3383">P3383</a></li>
</ul>
<h1 id="提高历练地">提高历练地</h1>
<p>已经去除了普及组难度的，请组织放心。成长大牛之必写题！！！</p>
<h2 id="搜索ex">搜索Ex</h2>
<p>开始提高组的试炼。这里已经去除了所有普及组难度的题目。哼哼，怕了吧。。</p>
<ul>
<li><a href="/problem/P1120">P1120</a></li>
<li><a href="/problem/P1378">P1378</a></li>
<li><a href="/problem/P1514">P1514</a></li>
<li><a href="/problem/P1312">P1312</a></li>
<li><a href="/problem/P1441">P1441</a></li>
<li><a href="/problem/P1242">P1242</a></li>
</ul>
<h2 id="动态规划tglv1">动态规划TG.lv(1)</h2>
<p>这是提高组难度中比较基础的动态规划，也许一两个转移方程就可以写出。</p>
<ul>
<li><a href="/problem/P1005">P1005</a></li>
<li><a href="/problem/P1373">P1373</a></li>
<li><a href="/problem/P2279">P2279</a></li>
<li><a href="/problem/P1220">P1220</a></li>
<li><a href="/problem/P1156">P1156</a></li>
</ul>
<h2 id="动态规划tglv2">动态规划TG.lv(2)</h2>
<p>这里的动态规划稍稍有所加大难度，思考转移方程的时间可能会与编写程序的时间持平。</p>
<ul>
<li><a href="/problem/P1273">P1273</a></li>
<li><a href="/problem/P1169">P1169</a></li>
<li><a href="/problem/P2577">P2577</a></li>
<li><a href="/problem/P1070">P1070</a></li>
<li><a href="/problem/P2051">P2051</a></li>
</ul>
<h2 id="动态规划tglv3">动态规划TG.lv(3)</h2>
<p>比较需要技巧的动态规划。有的不仅仅需要状态转移方程，可能还会与别的算法综合。</p>
<ul>
<li><a href="/problem/P1415">P1415</a></li>
<li><a href="/problem/P2157">P2157</a></li>
<li><a href="/problem/P2216">P2216</a></li>
<li><a href="/problem/P2331">P2331</a></li>
<li><a href="/problem/P2467">P2467</a></li>
<li><a href="/problem/P3084">P3084</a></li>
</ul>
<h2 id="数论">数论</h2>
<p>数论就是研究整数的理论。包括公约公倍数、质数、欧拉定理和同余方程等。</p>
<ul>
<li><a href="/problem/P2152">P2152</a></li>
<li><a href="/problem/P1414">P1414</a></li>
<li><a href="/problem/P1134">P1134</a></li>
<li><a href="/problem/P1313">P1313</a></li>
<li><a href="/problem/P1306">P1306</a></li>
</ul>
<h2 id="博弈论">博弈论</h2>
<p>博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。</p>
<ul>
<li><a href="/problem/P1199">P1199</a></li>
<li><a href="/problem/P1288">P1288</a></li>
<li><a href="/problem/P1290">P1290</a></li>
<li><a href="/problem/P2148">P2148</a></li>
<li><a href="/problem/P1247">P1247</a></li>
<li><a href="/problem/P2575">P2575</a></li>
</ul>
<h2 id="其他数学问题">其他数学问题</h2>
<p>听说学oi的同志们数学都挺好。那么。就请完成下面的题目证明这一点吧！</p>
<ul>
<li><a href="/problem/P1357">P1357</a></li>
<li><a href="/problem/P1641">P1641</a></li>
<li><a href="/problem/P2059">P2059</a></li>
<li><a href="/problem/P2154">P2154</a></li>
<li><a href="/problem/P2261">P2261</a></li>
<li><a href="/problem/P2327">P2327</a></li>
<li><a href="/problem/P1066">P1066</a></li>
</ul>
<h2 id="图的遍历">图的遍历</h2>
<p>图是一种非常重要的数据结构，描述对象复杂的练习。这里开始接触图的基本概念。</p>
<ul>
<li><a href="/problem/P2661">P2661</a></li>
<li><a href="/problem/P1330">P1330</a></li>
<li><a href="/problem/P1341">P1341</a></li>
<li><a href="/problem/P2921">P2921</a></li>
</ul>
<h2 id="最短路问题">最短路问题</h2>
<p>最短路是图论中最重要的部分，多种算法可以应用。很多题目都可以抽象成这种模型。</p>
<ul>
<li><a href="/problem/P1339">P1339</a></li>
<li><a href="/problem/P1462">P1462</a></li>
<li><a href="/problem/P1346">P1346</a></li>
<li><a href="/problem/P1119">P1119</a></li>
<li><a href="/problem/P1144">P1144</a></li>
<li><a href="/problem/P1522">P1522</a></li>
</ul>
<h2 id="最小生成树">最小生成树</h2>
<p>最小生成树可以用kruskal（克鲁斯卡尔）算法或prim（普里姆）算法求出。</p>
<ul>
<li><a href="/problem/P1546">P1546</a></li>
<li><a href="/problem/P2330">P2330</a></li>
<li><a href="/problem/P1991">P1991</a></li>
<li><a href="/problem/P1265">P1265</a></li>
</ul>
<h2 id="较复杂图论i">较复杂图论I</h2>
<p>别的些图论问题，包括树、拓扑排序等。要过这一关，需要学习不少新的算法。</p>
<ul>
<li><a href="/problem/P1113">P1113</a></li>
<li><a href="/problem/P1268">P1268</a></li>
<li><a href="/problem/P1525">P1525</a></li>
<li><a href="/problem/P1983">P1983</a></li>
</ul>
<h2 id="较复杂图论ii">较复杂图论II</h2>
<p>更高级的图论算法。包括差分约束、强连通、二分图等。会更难一些。</p>
<ul>
<li><a href="/problem/P1993">P1993</a></li>
<li><a href="/problem/P1726">P1726</a></li>
<li><a href="/problem/P2055">P2055</a></li>
<li><a href="/problem/P2149">P2149</a></li>
<li><a href="/problem/P1345">P1345</a></li>
</ul>
<h2 id="并查集">并查集</h2>
<p>用于处理一些不相交集合的合并及查询问题。常常在使用中以森林来表示。</p>
<ul>
<li><a href="/problem/P1111">P1111</a></li>
<li><a href="/problem/P2024">P2024</a></li>
<li><a href="/problem/P1197">P1197</a></li>
<li><a href="/problem/P1196">P1196</a></li>
</ul>
<h2 id="堆">堆</h2>
<p>堆总是一棵完全树；堆中某个节点的值总是不大于或不小于其父节点的值。</p>
<ul>
<li><a href="/problem/P1801">P1801</a></li>
<li><a href="/problem/P2278">P2278</a></li>
<li><a href="/problem/P1631">P1631</a></li>
<li><a href="/problem/P2085">P2085</a></li>
<li><a href="/problem/P1484">P1484</a></li>
</ul>
<h2 id="线段树树状数组基础">线段树树状数组基础</h2>
<p>这都是比较高级的线性数据结构。在处理一些询问与修改线性问题时，是很好用的。</p>
<ul>
<li><a href="/problem/P1972">P1972</a></li>
<li><a href="/problem/P1198">P1198</a></li>
<li><a href="/problem/P2023">P2023</a></li>
<li><a href="/problem/P2161">P2161</a></li>
</ul>
<h2 id="神奇的解法">神奇的解法</h2>
<p>有些问题刚开始觉得无从下手。好好想一想，尽量别看题解，否则你会大呼“简单”。</p>
<ul>
<li><a href="/problem/P1007">P1007</a></li>
<li><a href="/problem/P1984">P1984</a></li>
<li><a href="/problem/P2022">P2022</a></li>
<li><a href="/problem/P2320">P2320</a></li>
</ul>
<h2 id="倍增">倍增</h2>
<p>一种特殊的枚举算法，但可大大加快效率。近年noip有考到。难度较大。</p>
<ul>
<li><a href="/problem/P1967">P1967</a></li>
<li><a href="/problem/P1081">P1081</a></li>
<li><a href="/problem/P1613">P1613</a></li>
</ul>
<h2 id="强连通分量">强连通分量</h2>
<p>强连通分量</p>
<ul>
<li><a href="/problem/P2341">P2341</a></li>
<li><a href="/problem/P3469">P3469</a></li>
<li><a href="/problem/P2746">P2746</a></li>
<li><a href="/problem/P3119">P3119</a></li>
<li><a href="/problem/P3225">P3225</a></li>
</ul>
<h2 id="boss战-提高综合练习1">BOSS战-提高综合练习1</h2>
<p>年轻人，又是个送上门的，让我来看看你真实的本领。啊哈哈哈哈哈！</p>
<ul>
<li><a href="/problem/P2264">P2264</a></li>
<li><a href="/problem/P1772">P1772</a></li>
<li><a href="/problem/P1083">P1083</a></li>
<li><a href="/problem/P1979">P1979</a></li>
<li><a href="/problem/P2939">P2939</a></li>
</ul>
<h2 id="boss战-提高综合练习2">BOSS战-提高综合练习2</h2>
<p>再来！这里有的题目并非单纯的考察某个算法，而是考察一种综合性的思维。</p>
<ul>
<li><a href="/problem/P1901">P1901</a></li>
<li><a href="/problem/P1314">P1314</a></li>
<li><a href="/problem/P2144">P2144</a></li>
<li><a href="/problem/P1073">P1073</a></li>
<li><a href="/problem/P2324">P2324</a></li>
</ul>
<h2 id="boss战-提高综合练习3">BOSS战-提高综合练习3</h2>
<p>既然已经打倒了前面2个boss，那么第3个也是没有问题的。少年，来吧！</p>
<ul>
<li><a href="/problem/P1965">P1965</a></li>
<li><a href="/problem/P1311">P1311</a></li>
<li><a href="/problem/P2296">P2296</a></li>
<li><a href="/problem/P1084">P1084</a></li>
</ul>
<h2 id="提高模板-nlogn数据结构">提高模板-nlogn数据结构</h2>
<p>虽然这些算法不是noip必须的，但是不算困难，很多题目可以使用这些方法。</p>
<ul>
<li><a href="/problem/P3374">P3374</a></li>
<li><a href="/problem/P3368">P3368</a></li>
<li><a href="/problem/P3372">P3372</a></li>
<li><a href="/problem/P3373">P3373</a></li>
<li><a href="/problem/P1439">P1439</a></li>
<li><a href="/problem/P3378">P3378</a></li>
</ul>
<h1 id="省选斗兽场noi神殿">省选斗兽场/NOI神殿</h1>
<p>为省选及以上选手制作的训练场。其实，省选水平的oier不需要一些外加的刷题列表，本栏仅供参考，也欢迎各位指出不足。</p>
<h2 id="省选基础-读入输出优化">省选基础-读入/输出优化</h2>
<p>读入/输出优化是省选刷题时必要的一个东西，这里给出了几题，需要自己手写相应的读入输出处理。作为第一关，这一关相对简单。</p>
<ul>
<li><a href="/problem/P1580">P1580</a></li>
<li><a href="/problem/P2393">P2393</a></li>
<li><a href="/problem/P2394">P2394</a></li>
</ul>
<h2 id="省选基础-位运算">省选基础-位运算</h2>
<p>位运算往往在必要的时候,能带你优化一下常数,也许是空间;也许是时间;有的时候这样可以多过很多分</p>
<ul>
<li><a href="/problem/P2114">P2114</a></li>
<li><a href="/problem/P2396">P2396</a></li>
<li><a href="/problem/P2397">P2397</a></li>
</ul>
<h2 id="省选基础-打表">省选基础-打表</h2>
<p>打表虽然很赖皮,而且基本都是非正解,但是这种办法能让我们在省选中拿到一些会超时或者会超空间的一些数据点</p>
<ul>
<li><a href="/problem/P1149">P1149</a></li>
<li><a href="/problem/P1463">P1463</a></li>
<li><a href="/problem/P1896">P1896</a></li>
</ul>
<h2 id="动态规划1">动态规划1</h2>
<p>动态规划</p>
<ul>
<li><a href="/problem/P2051">P2051</a></li>
<li><a href="/problem/P1879">P1879</a></li>
<li><a href="/problem/P1850">P1850</a></li>
<li><a href="/problem/P2831">P2831</a></li>
<li><a href="/problem/P1131">P1131</a></li>
<li><a href="/problem/P1169">P1169</a></li>
</ul>
<h2 id="动态规划2">动态规划2</h2>
<p>动态规划</p>
<ul>
<li><a href="/problem/P1273">P1273</a></li>
<li><a href="/problem/P3648">P3648</a></li>
<li><a href="/problem/P2519">P2519</a></li>
<li><a href="/problem/P2515">P2515</a></li>
<li><a href="/problem/P3233">P3233</a></li>
<li><a href="/problem/P2501">P2501</a></li>
</ul>
<h2 id="网络流最大流">网络流——最大流</h2>
<p>最大流</p>
<ul>
<li><a href="/problem/P2765">P2765</a></li>
<li><a href="/problem/P2764">P2764</a></li>
<li><a href="/problem/P2763">P2763</a></li>
<li><a href="/problem/P2766">P2766</a></li>
<li><a href="/problem/P2774">P2774</a></li>
<li><a href="/problem/P2805">P2805</a></li>
</ul>
<h2 id="网络流费用流">网络流——费用流</h2>
<p>费用流</p>
<ul>
<li><a href="/problem/P2153">P2153</a></li>
<li><a href="/problem/P2053">P2053</a></li>
<li><a href="/problem/P3159">P3159</a></li>
<li><a href="/problem/P2604">P2604</a></li>
<li><a href="/problem/P2050">P2050</a></li>
<li><a href="/problem/P3980">P3980</a></li>
</ul>
<h2 id="单调队列">单调队列</h2>
<p>单调队列</p>
<ul>
<li><a href="/problem/P2698">P2698</a></li>
<li><a href="/problem/P2216">P2216</a></li>
<li><a href="/problem/P2219">P2219</a></li>
<li><a href="/problem/P2564">P2564</a></li>
<li><a href="/problem/P2569">P2569</a></li>
</ul>
<h2 id="概率期望">概率期望</h2>
<p>概率期望</p>
<ul>
<li><a href="/problem/P2473">P2473</a></li>
<li><a href="/problem/P2221">P2221</a></li>
<li><a href="/problem/P3317">P3317</a></li>
<li><a href="/problem/P3343">P3343</a></li>
<li><a href="/problem/P3600">P3600</a></li>
<li><a href="/problem/P3830">P3830</a></li>
</ul>
<h2 id="二分图">二分图</h2>
<p>二分图</p>
<ul>
<li><a href="/problem/P3386">P3386</a></li>
<li><a href="/problem/P1640">P1640</a></li>
<li><a href="/problem/P1129">P1129</a></li>
<li><a href="/problem/P1963">P1963</a></li>
<li><a href="/problem/P3231">P3231</a></li>
<li><a href="/problem/P2526">P2526</a></li>
</ul>
<h2 id="点分治">点分治</h2>
<p>点分治</p>
<ul>
<li><a href="/problem/P2634">P2634</a></li>
<li><a href="/problem/P2664">P2664</a></li>
<li><a href="/problem/P3806">P3806</a></li>
<li><a href="/problem/P3676">P3676</a></li>
</ul>
<h2 id="后缀数组">后缀数组</h2>
<p>后缀数组</p>
<ul>
<li><a href="/problem/P3809">P3809</a></li>
<li><a href="/problem/P1117">P1117</a></li>
<li><a href="/problem/P2178">P2178</a></li>
<li><a href="/problem/P2463">P2463</a></li>
<li><a href="/problem/P2336">P2336</a></li>
</ul>
<h2 id="主席树">主席树</h2>
<p>主席树</p>
<ul>
<li><a href="/problem/P2468">P2468</a></li>
<li><a href="/problem/P3157">P3157</a></li>
<li><a href="/problem/P3302">P3302</a></li>
<li><a href="/problem/P3168">P3168</a></li>
<li><a href="/problem/P3313">P3313</a></li>
</ul>
<h2 id="数位dp">数位DP</h2>
<p>数位DP</p>
<ul>
<li><a href="/problem/P2602">P2602</a></li>
<li><a href="/problem/P3281">P3281</a></li>
<li><a href="/problem/P2518">P2518</a></li>
<li><a href="/problem/P2606">P2606</a></li>
</ul>
<h2 id="ac自动机">AC自动机</h2>
<p>AC自动机</p>
<ul>
<li><a href="/problem/P3808">P3808</a></li>
<li><a href="/problem/P3796">P3796</a></li>
<li><a href="/problem/P2444">P2444</a></li>
<li><a href="/problem/P2414">P2414</a></li>
</ul>
<h2 id="平衡树">平衡树</h2>
<p>平衡树</p>
<ul>
<li><a href="/problem/P2042">P2042</a></li>
<li><a href="/problem/P2596">P2596</a></li>
<li><a href="/problem/P1110">P1110</a></li>
<li><a href="/problem/P3285">P3285</a></li>
<li><a href="/problem/P3644">P3644</a></li>
<li><a href="/problem/P3765">P3765</a></li>
<li><a href="/problem/P3369">P3369</a></li>
</ul>
<h2 id="树链剖分">树链剖分</h2>
<p>树链剖分</p>
<ul>
<li><a href="/problem/P2590">P2590</a></li>
<li><a href="/problem/P2486">P2486</a></li>
<li><a href="/problem/P2146">P2146</a></li>
<li><a href="/problem/P3258">P3258</a></li>
<li><a href="/problem/P3178">P3178</a></li>
</ul>
<h2 id="动态树">动态树</h2>
<p>动态树</p>
<ul>
<li><a href="/problem/P3690">P3690</a></li>
<li><a href="/problem/P2387">P2387</a></li>
<li><a href="/problem/P3203">P3203</a></li>
<li><a href="/problem/P3348">P3348</a></li>
</ul>
<h2 id="树套树">树套树</h2>
<p>树套树</p>
<ul>
<li><a href="/problem/P1903">P1903</a></li>
<li><a href="/problem/P3157">P3157</a></li>
<li><a href="/problem/P3332">P3332</a></li>
<li><a href="/problem/P2166">P2166</a></li>
<li><a href="/problem/P3380">P3380</a></li>
<li><a href="/problem/P2137">P2137</a></li>
<li><a href="/problem/P3759">P3759</a></li>
</ul>
<h2 id="可持久化trie树">可持久化Trie树</h2>
<p>可持久化Trie树</p>
<ul>
<li><a href="/problem/P2048">P2048</a></li>
<li><a href="/problem/P3527">P3527</a></li>
<li><a href="/problem/P3302">P3302</a></li>
<li><a href="/problem/P3168">P3168</a></li>
<li><a href="/problem/P3242">P3242</a></li>
<li><a href="/problem/P3241">P3241</a></li>
<li><a href="/problem/P3293">P3293</a></li>
</ul>
<h2 id="莫队算法">莫队算法</h2>
<p>莫队算法</p>
<ul>
<li><a href="/problem/P1972">P1972</a></li>
<li><a href="/problem/P2336">P2336</a></li>
<li><a href="/problem/P3709">P3709</a></li>
<li><a href="/problem/P2709">P2709</a></li>
<li><a href="/problem/P3674">P3674</a></li>
</ul>
<h2 id="分块">分块</h2>
<p>分块</p>
<ul>
<li><a href="/problem/P1972">P1972</a></li>
<li><a href="/problem/P3396">P3396</a></li>
<li><a href="/problem/P1822">P1822</a></li>
<li><a href="/problem/P2801">P2801</a></li>
<li><a href="/problem/P3203">P3203</a></li>
</ul>
<h2 id="莫比乌斯反演">莫比乌斯反演</h2>
<p>莫比乌斯反演</p>
<ul>
<li><a href="/problem/P3768">P3768</a></li>
<li><a href="/problem/P3172">P3172</a></li>
<li><a href="/problem/P3455">P3455</a></li>
<li><a href="/problem/P2522">P2522</a></li>
<li><a href="/problem/P3327">P3327</a></li>
</ul>
<h2 id="其他">其他</h2>
<p>其他</p>
<ul>
<li><a href="/problem/P3377">P3377</a></li>
<li><a href="/problem/P3261">P3261</a></li>
<li><a href="/problem/P3382">P3382</a></li>
<li><a href="/problem/P2571">P2571</a></li>
<li><a href="/problem/P3222">P3222</a></li>
<li><a href="/problem/P3187">P3187</a></li>
<li><a href="/problem/P3199">P3199</a></li>
<li><a href="/problem/P3292">P3292</a></li>
<li><a href="/problem/P2824">P2824</a></li>
<li><a href="/problem/P3285">P3285</a></li>
<li><a href="/problem/P1552">P1552</a></li>
</ul>
<h1 id="usaco">USACO</h1>
<p>美国经典的算法练习题库，值得一刷</p>
<h2 id="usaco-section-11">USACO Section 1.1</h2>
<ul>
<li><a href="/problem/P1200">P1200</a></li>
<li><a href="/problem/P1201">P1201</a></li>
<li><a href="/problem/P1202">P1202</a></li>
<li><a href="/problem/P1203">P1203</a></li>
</ul>
<h2 id="usaco-section-12">USACO Section 1.2</h2>
<p>完全枚举</p>
<ul>
<li><a href="/problem/P3864">P3864</a></li>
<li><a href="/problem/P1204">P1204</a></li>
<li><a href="/problem/P1205">P1205</a></li>
<li><a href="/problem/P1206">P1206</a></li>
<li><a href="/problem/P1207">P1207</a></li>
</ul>
<h2 id="usaco-section-13">USACO Section 1.3</h2>
<p>贪心</p>
<ul>
<li><a href="/problem/P1208">P1208</a></li>
<li><a href="/problem/P1209">P1209</a></li>
<li><a href="/problem/P1211">P1211</a></li>
<li><a href="/problem/P1444">P1444</a></li>
<li><a href="/problem/P3650">P3650</a></li>
<li><a href="/problem/P2693">P2693</a></li>
</ul>
<h2 id="usaco-section-14">USACO Section 1.4</h2>
<p>有技巧的枚举</p>
<ul>
<li><a href="/problem/P1214">P1214</a></li>
<li><a href="/problem/P1215">P1215</a></li>
</ul>
<h2 id="usaco-section-15">USACO Section 1.5</h2>
<p>二进制数</p>
<ul>
<li><a href="/problem/P1216">P1216</a></li>
<li><a href="/problem/P1217">P1217</a></li>
<li><a href="/problem/P1218">P1218</a></li>
</ul>
<h2 id="usaco-section-21">USACO Section 2.1</h2>
<p>图论和洪水填充</p>
<ul>
<li><a href="/problem/P1457">P1457</a></li>
<li><a href="/problem/P1458">P1458</a></li>
<li><a href="/problem/P1459">P1459</a></li>
<li><a href="/problem/P1460">P1460</a></li>
<li><a href="/problem/P1461">P1461</a></li>
</ul>
<h2 id="usaco-section-22">USACO Section 2.2</h2>
<p>数据结构与动态规划</p>
<ul>
<li><a href="/problem/P1465">P1465</a></li>
<li><a href="/problem/P1466">P1466</a></li>
<li><a href="/problem/P1467">P1467</a></li>
<li><a href="/problem/P1468">P1468</a></li>
</ul>
<h2 id="usaco-section-23">USACO Section 2.3</h2>
<ul>
<li><a href="/problem/P1470">P1470</a></li>
<li><a href="/problem/P1472">P1472</a></li>
<li><a href="/problem/P1473">P1473</a></li>
<li><a href="/problem/P1474">P1474</a></li>
<li><a href="/problem/P1475">P1475</a></li>
</ul>
<h2 id="usaco-section-24">USACO Section 2.4</h2>
<p>最短路径</p>
<ul>
<li><a href="/problem/P1518">P1518</a></li>
<li><a href="/problem/P1519">P1519</a></li>
<li><a href="/problem/P1522">P1522</a></li>
<li><a href="/problem/P1529">P1529</a></li>
<li><a href="/problem/P1530">P1530</a></li>
</ul>
<h2 id="usaco-section-31">USACO Section 3.1</h2>
<p>最小生成树</p>
<ul>
<li><a href="/problem/P1546">P1546</a></li>
<li><a href="/problem/P2722">P2722</a></li>
<li><a href="/problem/P2723">P2723</a></li>
<li><a href="/problem/P2724">P2724</a></li>
<li><a href="/problem/P2725">P2725</a></li>
</ul>
<h2 id="usaco-section-32">USACO Section 3.2</h2>
<p>背包问题</p>
<ul>
<li><a href="/problem/P1134">P1134</a></li>
<li><a href="/problem/P2727">P2727</a></li>
<li><a href="/problem/P2728">P2728</a></li>
<li><a href="/problem/P2729">P2729</a></li>
<li><a href="/problem/P2730">P2730</a></li>
<li><a href="/problem/P1828">P1828</a></li>
</ul>
<h2 id="usaco-section-33">USACO Section 3.3</h2>
<p>欧拉回路</p>
<ul>
<li><a href="/problem/P2731">P2731</a></li>
<li><a href="/problem/P2732">P2732</a></li>
<li><a href="/problem/P1930">P1930</a></li>
<li><a href="/problem/P2733">P2733</a></li>
<li><a href="/problem/P2734">P2734</a></li>
</ul>
<h2 id="usaco-section-34">USACO Section 3.4</h2>
<p>计算几何</p>
<ul>
<li><a href="/problem/P1827">P1827</a></li>
<li><a href="/problem/P2735">P2735</a></li>
<li><a href="/problem/P2736">P2736</a></li>
</ul>
<h2 id="usaco-section-41">USACO Section 4.1</h2>
<p>最优化</p>
<ul>
<li><a href="/problem/P2737">P2737</a></li>
<li><a href="/problem/P2738">P2738</a></li>
</ul>
<h2 id="usaco-section-42">USACO Section 4.2</h2>
<p>网络流</p>
<ul>
<li><a href="/problem/P2740">P2740</a></li>
<li><a href="/problem/P1894">P1894</a></li>
<li><a href="/problem/P2751">P2751</a></li>
</ul>
<h2 id="usaco-section-43">USACO Section 4.3</h2>
<p>高精度</p>
<ul>
<li><a href="/problem/P2687">P2687</a></li>
<li><a href="/problem/P2752">P2752</a></li>
<li><a href="/problem/P2753">P2753</a></li>
</ul>
<h2 id="usaco-section-44">USACO Section 4.4</h2>
<ul>
<li><a href="/problem/P1344">P1344</a></li>
<li><a href="/problem/P2739">P2739</a></li>
<li><a href="/problem/P2741">P2741</a></li>
</ul>
<h2 id="usaco-section-51">USACO Section 5.1</h2>
<p>二维凸包</p>
<ul>
<li><a href="/problem/P2742">P2742</a></li>
<li><a href="/problem/P2743">P2743</a></li>
<li><a href="/problem/P2749">P2749</a></li>
</ul>
<h2 id="usaco-section-52">USACO Section 5.2</h2>
<ul>
<li><a href="/problem/P1560">P1560</a></li>
</ul>
<h2 id="usaco-section-53">USACO Section 5.3</h2>
<p>启发式搜索</p>
<ul>
<li><a href="/problem/P2701">P2701</a></li>
<li><a href="/problem/P2744">P2744</a></li>
<li><a href="/problem/P2745">P2745</a></li>
<li><a href="/problem/P2746">P2746</a></li>
</ul>
<h2 id="usaco-section-54">USACO Section 5.4</h2>
<ul>
<li><a href="/problem/P1345">P1345</a></li>
<li><a href="/problem/P2747">P2747</a></li>
<li><a href="/problem/P2748">P2748</a></li>
</ul>
<h2 id="usaco-section-55">USACO Section 5.5</h2>
<ul>
<li><a href="/problem/P1709">P1709</a></li>
<li><a href="/problem/P1856">P1856</a></li>
<li><a href="/problem/P2750">P2750</a></li>
</ul>
<pre><code class="language-json">[
  {
    &quot;name&quot;: &quot;新手村&quot;,
    &quot;description&quot;: &quot;任何一个伟大的目标，都有一个微不足道的开始。&quot;,
    &quot;subtasks&quot;: [
      {
        &quot;name&quot;: &quot;洛谷的第一个任务&quot;,
        &quot;description&quot;: &quot;勇敢的迈出第一步，了解下语言和洛谷。跟着书本和老师走，不会难的。&quot;,
        &quot;problems&quot;: [&quot;P1000&quot;, &quot;P1001&quot;, &quot;P1421&quot;, &quot;P1425&quot;]
      },
      {
        &quot;name&quot;: &quot;顺序与分支&quot;,
        &quot;description&quot;: &quot;计算机的智能性开始得以体现，因为计算机能够根据不同的条件选择了。&quot;,
        &quot;problems&quot;: [&quot;P1422&quot;, &quot;P1085&quot;, &quot;P1089&quot;, &quot;P1909&quot;]
      },
      {
        &quot;name&quot;: &quot;循环！循环！循环！&quot;,
        &quot;description&quot;: &quot;计算机最不怕的就是重复。你让它做10000次同样的事它也不怕啦，但是让他做1亿亿次的话……&quot;,
        &quot;problems&quot;: [&quot;P1008&quot;, &quot;P1035&quot;, &quot;P1423&quot;, &quot;P1424&quot;, &quot;P1980&quot;]
      },
      {
        &quot;name&quot;: &quot;数组&quot;,
        &quot;description&quot;: &quot;跟数组有关的题目基本上都要用到循环，所以请先完成1-3。&quot;,
        &quot;problems&quot;: [&quot;P1046&quot;, &quot;P1047&quot;, &quot;P1427&quot;, &quot;P1428&quot;, &quot;P2141&quot;, &quot;P1567&quot;]
      },
      {
        &quot;name&quot;: &quot;简单字符串&quot;,
        &quot;description&quot;: &quot;计算机不仅可以处理数字，还能处理文字！就是其实跟数字也没什么差。&quot;,
        &quot;problems&quot;: [&quot;P1055&quot;, &quot;P1200&quot;, &quot;P1308&quot;, &quot;P1553&quot;, &quot;P1598&quot;, &quot;P1914&quot;]
      },
      {
        &quot;name&quot;: &quot;过程函数与递归&quot;,
        &quot;description&quot;: &quot;将代码串进行打包，就是过程与函数。过程与函数调用自己则为递归。有一点小难但不要怕哦。&quot;,
        &quot;problems&quot;: [&quot;P1028&quot;, &quot;P1036&quot;, &quot;P1149&quot;, &quot;P1217&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-入门综合练习1&quot;,
        &quot;description&quot;: &quot;这里将前面的内容综合起来了，会有点难，不过你可以问老师同学，也能上网查资料。&quot;,
        &quot;problems&quot;: [&quot;P1478&quot;, &quot;P1618&quot;, &quot;P1579&quot;, &quot;P2089&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-入门综合练习2&quot;,
        &quot;description&quot;: &quot;勇士，竟然来到了BOSS的老巢！来一场恶斗，证明自己的实力，解锁下一个级别！&quot;,
        &quot;problems&quot;: [&quot;P1426&quot;, &quot;P1464&quot;, &quot;P1014&quot;, &quot;P1022&quot;, &quot;P1307&quot;]
      }
    ]
  },
  {
    &quot;name&quot;: &quot;普及练习场&quot;,
    &quot;description&quot;: &quot;普及组选手可冲刺训练，提高组选手亦可在此巩固基础。&quot;,
    &quot;subtasks&quot;: [
      {
        &quot;name&quot;: &quot;简单的模拟&quot;,
        &quot;description&quot;: &quot;开始普及组的训练！所谓模拟，就是直接根据题意编写，思维难度简单。&quot;,
        &quot;problems&quot;: [&quot;P1003&quot;, &quot;P1067&quot;, &quot;P1540&quot;, &quot;P1056&quot;, &quot;P1328&quot;, &quot;P1563&quot;]
      },
      {
        &quot;name&quot;: &quot;交叉模拟&quot;,
        &quot;description&quot;: &quot;这里也是模拟，但是会混有些别的部分。思维难度不大，但是编写起来会有些难度。&quot;,
        &quot;problems&quot;: [&quot;P1023&quot;, &quot;P1031&quot;, &quot;P1042&quot;, &quot;P1086&quot;, &quot;P1098&quot;, &quot;P3952&quot;]
      },
      {
        &quot;name&quot;: &quot;排序&quot;,
        &quot;description&quot;: &quot;将杂乱无章的数据变得有规律。有各种各样的排序算法，看情况使用。&quot;,
        &quot;problems&quot;: [&quot;P1177&quot;, &quot;P1059&quot;, &quot;P1068&quot;, &quot;P1781&quot;]
      },
      {
        &quot;name&quot;: &quot;排序Ex&quot;,
        &quot;description&quot;: &quot;这里的排序就更上一层了。不仅融合了别的算法与技巧，排序本身也有各种花招。&quot;,
        &quot;problems&quot;: [&quot;P1583&quot;, &quot;P1051&quot;, &quot;P1093&quot;, &quot;P1309&quot;]
      },
      {
        &quot;name&quot;: &quot;字符串处理&quot;,
        &quot;description&quot;: &quot;这里的字符串处理还会变得更加的有意思，难度也更大。需要好好地思考一下。&quot;,
        &quot;problems&quot;: [&quot;P1603&quot;, &quot;P1071&quot;, &quot;P1012&quot;, &quot;P1538&quot;]
      },
      {
        &quot;name&quot;: &quot;贪心&quot;,
        &quot;description&quot;: &quot;贪心就是只考虑眼前的利益。对于我们人生来说太贪是不好的，不过oi中，有时是对的。&quot;,
        &quot;problems&quot;: [&quot;P1090&quot;, &quot;P1181&quot;, &quot;P1208&quot;, &quot;P1223&quot;, &quot;P1094&quot;, &quot;P1803&quot;, &quot;P1031&quot;, &quot;P1080&quot;]
      },
      {
        &quot;name&quot;: &quot;深度优先搜索&quot;,
        &quot;description&quot;: &quot;搜索可以穷举各种情况。很多题目都可以用搜索完成。就算不能，搜索也是骗分神器。&quot;,
        &quot;problems&quot;: [&quot;P1219&quot;, &quot;P1019&quot;, &quot;P1101&quot;, &quot;P1605&quot;, &quot;P1040&quot;, &quot;P1092&quot;]
      },
      {
        &quot;name&quot;: &quot;广度优先搜索&quot;,
        &quot;description&quot;: &quot;广度优先搜索可以用来找有关“最短步数”的问题。恩，也可以用来“地毯式搜索”。&quot;,
        &quot;problems&quot;: [&quot;P1162&quot;, &quot;P1032&quot;, &quot;P1141&quot;, &quot;P1126&quot;, &quot;P1443&quot;]
      },
      {
        &quot;name&quot;: &quot;带有技巧的搜索&quot;,
        &quot;description&quot;: &quot;这里的搜索不仅包含了dfs和bfs，还包括剪枝、记录等技巧以加快速度。&quot;,
        &quot;problems&quot;: [&quot;P1118&quot;, &quot;P1434&quot;, &quot;P1433&quot;, &quot;P1074&quot;]
      },
      {
        &quot;name&quot;: &quot;分治算法&quot;,
        &quot;description&quot;: &quot;将大问题拆分为小问题，分而治之，各个击破，然后在合并回来。&quot;,
        &quot;problems&quot;: [&quot;P1226&quot;, &quot;P1010&quot;, &quot;P1908&quot;, &quot;P1498&quot;]
      },
      {
        &quot;name&quot;: &quot;简单数学问题&quot;,
        &quot;description&quot;: &quot;用计算机解决某些麻烦数学问题，再合适不过了。这真是绝妙的搭配啊！&quot;,
        &quot;problems&quot;: [&quot;P1088&quot;, &quot;P1045&quot;, &quot;P1403&quot;, &quot;P1017&quot;, &quot;P1147&quot;, &quot;P1029&quot;]
      },
      {
        &quot;name&quot;: &quot;递推与递归二分&quot;,
        &quot;description&quot;: &quot;递推，层层递进，由基础推向顶层。二分不仅可以用来查找数据，还可以确定最合适的值。&quot;,
        &quot;problems&quot;: [&quot;P1192&quot;, &quot;P1025&quot;, &quot;P1057&quot;, &quot;P1135&quot;, &quot;P1216&quot;, &quot;P1182&quot;, &quot;P1316&quot;]
      },
      {
        &quot;name&quot;: &quot;线性数据结构&quot;,
        &quot;description&quot;: &quot;数组，链表，队列，栈，都是线性结构。巧用这些结构可以做出不少方便的事情。&quot;,
        &quot;problems&quot;: [&quot;P1996&quot;, &quot;P1115&quot;, &quot;P1739&quot;, &quot;P1160&quot;, &quot;P1449&quot;]
      },
      {
        &quot;name&quot;: &quot;树形数据结构&quot;,
        &quot;description&quot;: &quot;由一个根节点分叉，越分越多，就成了树。树可以表示数据之间的从属关系&quot;,
        &quot;problems&quot;: [&quot;P1087&quot;, &quot;P1030&quot;, &quot;P1305&quot;, &quot;P5018&quot;]
      },
      {
        &quot;name&quot;: &quot;动态规划的背包问题&quot;,
        &quot;description&quot;: &quot;这是最基础的动态规划。不过如果是第一次接触会有些难以理解。加油闯过这个坎。&quot;,
        &quot;problems&quot;: [&quot;P1060&quot;, &quot;P1164&quot;, &quot;P1064&quot;, &quot;P1048&quot;, &quot;P1049&quot;, &quot;P1616&quot;]
      },
      {
        &quot;name&quot;: &quot;线性动态规划&quot;,
        &quot;description&quot;: &quot;这也是基础的动态规划。是在线性结构上面的动态规划，一定要掌握。&quot;,
        &quot;problems&quot;: [&quot;P1020&quot;, &quot;P1091&quot;, &quot;P1280&quot;, &quot;P1880&quot;, &quot;P1140&quot;, &quot;P1282&quot;]
      },
      {
        &quot;name&quot;: &quot;多维动态规划&quot;,
        &quot;description&quot;: &quot;这里的动态规划就不止一维了。不仅要小心时间复杂度，也要注意空间复杂度。&quot;,
        &quot;problems&quot;: [&quot;P1508&quot;, &quot;P1006&quot;, &quot;P1387&quot;, &quot;P1417&quot;, &quot;P1855&quot;, &quot;P1736&quot;]
      },
      {
        &quot;name&quot;: &quot;更要技巧的动规与记忆化&quot;,
        &quot;description&quot;: &quot;这边的题目有各种搞法。当然有的题目也可以使用记忆化搜索来降低思维难度。&quot;,
        &quot;problems&quot;: [&quot;P1064&quot;, &quot;P1541&quot;, &quot;P1026&quot;, &quot;P1063&quot;, &quot;P1156&quot;, &quot;P1052&quot;]
      },
      {
        &quot;name&quot;: &quot;高精度算法&quot;,
        &quot;description&quot;: &quot;就算是long long（或int64）还不够怎么办？用高精度算法。自己动手丰衣足食。&quot;,
        &quot;problems&quot;: [&quot;P1601&quot;, &quot;P2142&quot;, &quot;P1303&quot;, &quot;P1255&quot;, &quot;P1604&quot;]
      },
      {
        &quot;name&quot;: &quot;贪心EX&quot;,
        &quot;description&quot;: &quot;虽然是贪心题，可能不是你当时你虐着玩的贪心惹qwq&quot;,
        &quot;problems&quot;: [&quot;P1080&quot;, &quot;P1031&quot;, &quot;P1233&quot;, &quot;P2123&quot;]
      },
      {
        &quot;name&quot;: &quot;简单数学&quot;,
        &quot;description&quot;: &quot;数学和oi是密切相关的，数学不仅是oi的基础，而且是算法的核心。&quot;,
        &quot;problems&quot;: [&quot;P1865&quot;, &quot;P1372&quot;, &quot;P1338&quot;, &quot;P2158&quot;, &quot;P1582&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-普及综合练习1&quot;,
        &quot;description&quot;: &quot;好不容易闯到这一关，你那还等什么呢？抄起家伙赶快上啊！&quot;,
        &quot;problems&quot;: [&quot;P1478&quot;, &quot;P1203&quot;, &quot;P1363&quot;, &quot;P1736&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-普及综合练习2&quot;,
        &quot;description&quot;: &quot;来搞定第二个BOSS。虽然战斗艰难，但你一定没有问题。&quot;,
        &quot;problems&quot;: [&quot;P1201&quot;, &quot;P1095&quot;, &quot;P1058&quot;, &quot;P2258&quot;, &quot;P1108&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-普及综合练习3&quot;,
        &quot;description&quot;: &quot;普及练习场的大BOSS：“一定让你有去无回”。怎么办呢？只能打倒他开启下一个级别！&quot;,
        &quot;problems&quot;: [&quot;P1328&quot;, &quot;P1062&quot;, &quot;P1969&quot;, &quot;P1037&quot;]
      },
      {
        &quot;name&quot;: &quot;普及常见模板&quot;,
        &quot;description&quot;: &quot;这里集中了比较基础的算法的模板。提高和省选也有模板题哦！&quot;,
        &quot;problems&quot;: [&quot;P1177&quot;, &quot;P3366&quot;, &quot;P3367&quot;, &quot;P3371&quot;, &quot;P3383&quot;]
      }
    ]
  },
  {
    &quot;name&quot;: &quot;提高历练地&quot;,
    &quot;description&quot;: &quot;已经去除了普及组难度的，请组织放心。成长大牛之必写题！！！&quot;,
    &quot;subtasks&quot;: [
      {
        &quot;name&quot;: &quot;搜索Ex&quot;,
        &quot;description&quot;: &quot;开始提高组的试炼。这里已经去除了所有普及组难度的题目。哼哼，怕了吧。。&quot;,
        &quot;problems&quot;: [&quot;P1120&quot;, &quot;P1378&quot;, &quot;P1514&quot;, &quot;P1312&quot;, &quot;P1441&quot;, &quot;P1242&quot;]
      },
      {
        &quot;name&quot;: &quot;动态规划TG.lv(1)&quot;,
        &quot;description&quot;: &quot;这是提高组难度中比较基础的动态规划，也许一两个转移方程就可以写出。&quot;,
        &quot;problems&quot;: [&quot;P1005&quot;, &quot;P1373&quot;, &quot;P2279&quot;, &quot;P1220&quot;, &quot;P1156&quot;]
      },
      {
        &quot;name&quot;: &quot;动态规划TG.lv(2)&quot;,
        &quot;description&quot;: &quot;这里的动态规划稍稍有所加大难度，思考转移方程的时间可能会与编写程序的时间持平。&quot;,
        &quot;problems&quot;: [&quot;P1273&quot;, &quot;P1169&quot;, &quot;P2577&quot;, &quot;P1070&quot;, &quot;P2051&quot;]
      },
      {
        &quot;name&quot;: &quot;动态规划TG.lv(3)&quot;,
        &quot;description&quot;: &quot;比较需要技巧的动态规划。有的不仅仅需要状态转移方程，可能还会与别的算法综合。&quot;,
        &quot;problems&quot;: [&quot;P1415&quot;, &quot;P2157&quot;, &quot;P2216&quot;, &quot;P2331&quot;, &quot;P2467&quot;, &quot;P3084&quot;]
      },
      {
        &quot;name&quot;: &quot;数论&quot;,
        &quot;description&quot;: &quot;数论就是研究整数的理论。包括公约公倍数、质数、欧拉定理和同余方程等。&quot;,
        &quot;problems&quot;: [&quot;P2152&quot;, &quot;P1414&quot;, &quot;P1134&quot;, &quot;P1313&quot;, &quot;P1306&quot;]
      },
      {
        &quot;name&quot;: &quot;博弈论&quot;,
        &quot;description&quot;: &quot;博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。&quot;,
        &quot;problems&quot;: [&quot;P1199&quot;, &quot;P1288&quot;, &quot;P1290&quot;, &quot;P2148&quot;, &quot;P1247&quot;, &quot;P2575&quot;]
      },
      {
        &quot;name&quot;: &quot;其他数学问题&quot;,
        &quot;description&quot;: &quot;听说学oi的同志们数学都挺好。那么。就请完成下面的题目证明这一点吧！&quot;,
        &quot;problems&quot;: [&quot;P1357&quot;, &quot;P1641&quot;, &quot;P2059&quot;, &quot;P2154&quot;, &quot;P2261&quot;, &quot;P2327&quot;, &quot;P1066&quot;]
      },
      {
        &quot;name&quot;: &quot;图的遍历&quot;,
        &quot;description&quot;: &quot;图是一种非常重要的数据结构，描述对象复杂的练习。这里开始接触图的基本概念。&quot;,
        &quot;problems&quot;: [&quot;P2661&quot;, &quot;P1330&quot;, &quot;P1341&quot;, &quot;P2921&quot;]
      },
      {
        &quot;name&quot;: &quot;最短路问题&quot;,
        &quot;description&quot;: &quot;最短路是图论中最重要的部分，多种算法可以应用。很多题目都可以抽象成这种模型。&quot;,
        &quot;problems&quot;: [&quot;P1339&quot;, &quot;P1462&quot;, &quot;P1346&quot;, &quot;P1119&quot;, &quot;P1144&quot;, &quot;P1522&quot;]
      },
      {
        &quot;name&quot;: &quot;最小生成树&quot;,
        &quot;description&quot;: &quot;最小生成树可以用kruskal（克鲁斯卡尔）算法或prim（普里姆）算法求出。&quot;,
        &quot;problems&quot;: [&quot;P1546&quot;, &quot;P2330&quot;, &quot;P1991&quot;, &quot;P1265&quot;]
      },
      {
        &quot;name&quot;: &quot;较复杂图论I&quot;,
        &quot;description&quot;: &quot;别的些图论问题，包括树、拓扑排序等。要过这一关，需要学习不少新的算法。&quot;,
        &quot;problems&quot;: [&quot;P1113&quot;, &quot;P1268&quot;, &quot;P1525&quot;, &quot;P1983&quot;]
      },
      {
        &quot;name&quot;: &quot;较复杂图论II&quot;,
        &quot;description&quot;: &quot;更高级的图论算法。包括差分约束、强连通、二分图等。会更难一些。&quot;,
        &quot;problems&quot;: [&quot;P1993&quot;, &quot;P1726&quot;, &quot;P2055&quot;, &quot;P2149&quot;, &quot;P1345&quot;]
      },
      {
        &quot;name&quot;: &quot;并查集&quot;,
        &quot;description&quot;: &quot;用于处理一些不相交集合的合并及查询问题。常常在使用中以森林来表示。&quot;,
        &quot;problems&quot;: [&quot;P1111&quot;, &quot;P2024&quot;, &quot;P1197&quot;, &quot;P1196&quot;]
      },
      {
        &quot;name&quot;: &quot;堆&quot;,
        &quot;description&quot;: &quot;堆总是一棵完全树；堆中某个节点的值总是不大于或不小于其父节点的值。&quot;,
        &quot;problems&quot;: [&quot;P1801&quot;, &quot;P2278&quot;, &quot;P1631&quot;, &quot;P2085&quot;, &quot;P1484&quot;]
      },
      {
        &quot;name&quot;: &quot;线段树树状数组基础&quot;,
        &quot;description&quot;: &quot;这都是比较高级的线性数据结构。在处理一些询问与修改线性问题时，是很好用的。&quot;,
        &quot;problems&quot;: [&quot;P1972&quot;, &quot;P1198&quot;, &quot;P2023&quot;, &quot;P2161&quot;]
      },
      {
        &quot;name&quot;: &quot;神奇的解法&quot;,
        &quot;description&quot;: &quot;有些问题刚开始觉得无从下手。好好想一想，尽量别看题解，否则你会大呼“简单”。&quot;,
        &quot;problems&quot;: [&quot;P1007&quot;, &quot;P1984&quot;, &quot;P2022&quot;, &quot;P2320&quot;]
      },
      {
        &quot;name&quot;: &quot;倍增&quot;,
        &quot;description&quot;: &quot;一种特殊的枚举算法，但可大大加快效率。近年noip有考到。难度较大。&quot;,
        &quot;problems&quot;: [&quot;P1967&quot;, &quot;P1081&quot;, &quot;P1613&quot;]
      },
      {
        &quot;name&quot;: &quot;强连通分量&quot;,
        &quot;description&quot;: &quot;强连通分量&quot;,
        &quot;problems&quot;: [&quot;P2341&quot;, &quot;P3469&quot;, &quot;P2746&quot;, &quot;P3119&quot;, &quot;P3225&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-提高综合练习1&quot;,
        &quot;description&quot;: &quot;年轻人，又是个送上门的，让我来看看你真实的本领。啊哈哈哈哈哈！&quot;,
        &quot;problems&quot;: [&quot;P2264&quot;, &quot;P1772&quot;, &quot;P1083&quot;, &quot;P1979&quot;, &quot;P2939&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-提高综合练习2&quot;,
        &quot;description&quot;: &quot;再来！这里有的题目并非单纯的考察某个算法，而是考察一种综合性的思维。&quot;,
        &quot;problems&quot;: [&quot;P1901&quot;, &quot;P1314&quot;, &quot;P2144&quot;, &quot;P1073&quot;, &quot;P2324&quot;]
      },
      {
        &quot;name&quot;: &quot;BOSS战-提高综合练习3&quot;,
        &quot;description&quot;: &quot;既然已经打倒了前面2个boss，那么第3个也是没有问题的。少年，来吧！&quot;,
        &quot;problems&quot;: [&quot;P1965&quot;, &quot;P1311&quot;, &quot;P2296&quot;, &quot;P1084&quot;]
      },
      {
        &quot;name&quot;: &quot;提高模板-nlogn数据结构&quot;,
        &quot;description&quot;: &quot;虽然这些算法不是noip必须的，但是不算困难，很多题目可以使用这些方法。&quot;,
        &quot;problems&quot;: [&quot;P3374&quot;, &quot;P3368&quot;, &quot;P3372&quot;, &quot;P3373&quot;, &quot;P1439&quot;, &quot;P3378&quot;]
      }
    ]
  },
  {
    &quot;name&quot;: &quot;省选斗兽场/NOI神殿&quot;,
    &quot;description&quot;: &quot;为省选及以上选手制作的训练场。其实，省选水平的oier不需要一些外加的刷题列表，本栏仅供参考，也欢迎各位指出不足。&quot;,
    &quot;subtasks&quot;: [
      {
        &quot;name&quot;: &quot;省选基础-读入/输出优化&quot;,
        &quot;description&quot;: &quot;读入/输出优化是省选刷题时必要的一个东西，这里给出了几题，需要自己手写相应的读入输出处理。作为第一关，这一关相对简单。&quot;,
        &quot;problems&quot;: [&quot;P1580&quot;, &quot;P2393&quot;, &quot;P2394&quot;]
      },
      {
        &quot;name&quot;: &quot;省选基础-位运算&quot;,
        &quot;description&quot;: &quot;位运算往往在必要的时候,能带你优化一下常数,也许是空间;也许是时间;有的时候这样可以多过很多分&quot;,
        &quot;problems&quot;: [&quot;P2114&quot;, &quot;P2396&quot;, &quot;P2397&quot;]
      },
      {
        &quot;name&quot;: &quot;省选基础-打表&quot;,
        &quot;description&quot;: &quot;打表虽然很赖皮,而且基本都是非正解,但是这种办法能让我们在省选中拿到一些会超时或者会超空间的一些数据点&quot;,
        &quot;problems&quot;: [&quot;P1149&quot;, &quot;P1463&quot;, &quot;P1896&quot;]
      },
      {
        &quot;name&quot;: &quot;动态规划1&quot;,
        &quot;description&quot;: &quot;动态规划&quot;,
        &quot;problems&quot;: [&quot;P2051&quot;, &quot;P1879&quot;, &quot;P1850&quot;, &quot;P2831&quot;, &quot;P1131&quot;, &quot;P1169&quot;]
      },
      {
        &quot;name&quot;: &quot;动态规划2&quot;,
        &quot;description&quot;: &quot;动态规划&quot;,
        &quot;problems&quot;: [&quot;P1273&quot;, &quot;P3648&quot;, &quot;P2519&quot;, &quot;P2515&quot;, &quot;P3233&quot;, &quot;P2501&quot;]
      },
      {
        &quot;name&quot;: &quot;网络流——最大流&quot;,
        &quot;description&quot;: &quot;最大流&quot;,
        &quot;problems&quot;: [&quot;P2765&quot;, &quot;P2764&quot;, &quot;P2763&quot;, &quot;P2766&quot;, &quot;P2774&quot;, &quot;P2805&quot;]
      },
      {
        &quot;name&quot;: &quot;网络流——费用流&quot;,
        &quot;description&quot;: &quot;费用流&quot;,
        &quot;problems&quot;: [&quot;P2153&quot;, &quot;P2053&quot;, &quot;P3159&quot;, &quot;P2604&quot;, &quot;P2050&quot;, &quot;P3980&quot;]
      },
      {
        &quot;name&quot;: &quot;单调队列&quot;,
        &quot;description&quot;: &quot;单调队列&quot;,
        &quot;problems&quot;: [&quot;P2698&quot;, &quot;P2216&quot;, &quot;P2219&quot;, &quot;P2564&quot;, &quot;P2569&quot;]
      },
      {
        &quot;name&quot;: &quot;概率期望&quot;,
        &quot;description&quot;: &quot;概率期望&quot;,
        &quot;problems&quot;: [&quot;P2473&quot;, &quot;P2221&quot;, &quot;P3317&quot;, &quot;P3343&quot;, &quot;P3600&quot;, &quot;P3830&quot;]
      },
      {
        &quot;name&quot;: &quot;二分图&quot;,
        &quot;description&quot;: &quot;二分图&quot;,
        &quot;problems&quot;: [&quot;P3386&quot;, &quot;P1640&quot;, &quot;P1129&quot;, &quot;P1963&quot;, &quot;P3231&quot;, &quot;P2526&quot;]
      },
      {
        &quot;name&quot;: &quot;点分治&quot;,
        &quot;description&quot;: &quot;点分治&quot;,
        &quot;problems&quot;: [&quot;P2634&quot;, &quot;P2664&quot;, &quot;P3806&quot;, &quot;P3676&quot;]
      },
      {
        &quot;name&quot;: &quot;后缀数组&quot;,
        &quot;description&quot;: &quot;后缀数组&quot;,
        &quot;problems&quot;: [&quot;P3809&quot;, &quot;P1117&quot;, &quot;P2178&quot;, &quot;P2463&quot;, &quot;P2336&quot;]
      },
      {
        &quot;name&quot;: &quot;主席树&quot;,
        &quot;description&quot;: &quot;主席树&quot;,
        &quot;problems&quot;: [&quot;P2468&quot;, &quot;P3157&quot;, &quot;P3302&quot;, &quot;P3168&quot;, &quot;P3313&quot;]
      },
      {
        &quot;name&quot;: &quot;数位DP&quot;,
        &quot;description&quot;: &quot;数位DP&quot;,
        &quot;problems&quot;: [&quot;P2602&quot;, &quot;P3281&quot;, &quot;P2518&quot;, &quot;P2606&quot;]
      },
      {
        &quot;name&quot;: &quot;AC自动机&quot;,
        &quot;description&quot;: &quot;AC自动机&quot;,
        &quot;problems&quot;: [&quot;P3808&quot;, &quot;P3796&quot;, &quot;P2444&quot;, &quot;P2414&quot;]
      },
      {
        &quot;name&quot;: &quot;平衡树&quot;,
        &quot;description&quot;: &quot;平衡树&quot;,
        &quot;problems&quot;: [&quot;P2042&quot;, &quot;P2596&quot;, &quot;P1110&quot;, &quot;P3285&quot;, &quot;P3644&quot;, &quot;P3765&quot;, &quot;P3369&quot;]
      },
      {
        &quot;name&quot;: &quot;树链剖分&quot;,
        &quot;description&quot;: &quot;树链剖分&quot;,
        &quot;problems&quot;: [&quot;P2590&quot;, &quot;P2486&quot;, &quot;P2146&quot;, &quot;P3258&quot;, &quot;P3178&quot;]
      },
      {
        &quot;name&quot;: &quot;动态树&quot;,
        &quot;description&quot;: &quot;动态树&quot;,
        &quot;problems&quot;: [&quot;P3690&quot;, &quot;P2387&quot;, &quot;P3203&quot;, &quot;P3348&quot;]
      },
      {
        &quot;name&quot;: &quot;树套树&quot;,
        &quot;description&quot;: &quot;树套树&quot;,
        &quot;problems&quot;: [&quot;P1903&quot;, &quot;P3157&quot;, &quot;P3332&quot;, &quot;P2166&quot;, &quot;P3380&quot;, &quot;P2137&quot;, &quot;P3759&quot;]
      },
      {
        &quot;name&quot;: &quot;可持久化Trie树&quot;,
        &quot;description&quot;: &quot;可持久化Trie树&quot;,
        &quot;problems&quot;: [&quot;P2048&quot;, &quot;P3527&quot;, &quot;P3302&quot;, &quot;P3168&quot;, &quot;P3242&quot;, &quot;P3241&quot;, &quot;P3293&quot;]
      },
      {
        &quot;name&quot;: &quot;莫队算法&quot;,
        &quot;description&quot;: &quot;莫队算法&quot;,
        &quot;problems&quot;: [&quot;P1972&quot;, &quot;P2336&quot;, &quot;P3709&quot;, &quot;P2709&quot;, &quot;P3674&quot;]
      },
      {
        &quot;name&quot;: &quot;分块&quot;,
        &quot;description&quot;: &quot;分块&quot;,
        &quot;problems&quot;: [&quot;P1972&quot;, &quot;P3396&quot;, &quot;P1822&quot;, &quot;P2801&quot;, &quot;P3203&quot;]
      },
      {
        &quot;name&quot;: &quot;莫比乌斯反演&quot;,
        &quot;description&quot;: &quot;莫比乌斯反演&quot;,
        &quot;problems&quot;: [&quot;P3768&quot;, &quot;P3172&quot;, &quot;P3455&quot;, &quot;P2522&quot;, &quot;P3327&quot;]
      },
      {
        &quot;name&quot;: &quot;其他&quot;,
        &quot;description&quot;: &quot;其他&quot;,
        &quot;problems&quot;: [&quot;P3377&quot;, &quot;P3261&quot;, &quot;P3382&quot;, &quot;P2571&quot;, &quot;P3222&quot;, &quot;P3187&quot;, &quot;P3199&quot;, &quot;P3292&quot;, &quot;P2824&quot;, &quot;P3285&quot;, &quot;P1552&quot;]
      }
    ]
  },
  {
    &quot;name&quot;: &quot;USACO&quot;,
    &quot;description&quot;: &quot;美国经典的算法练习题库，值得一刷&quot;,
    &quot;subtasks&quot;: [
      {
        &quot;name&quot;: &quot;USACO Section 1.1&quot;,
        &quot;description&quot;: &quot;&quot;,
        &quot;problems&quot;: [&quot;P1200&quot;, &quot;P1201&quot;, &quot;P1202&quot;, &quot;P1203&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 1.2&quot;,
        &quot;description&quot;: &quot;完全枚举&quot;,
        &quot;problems&quot;: [&quot;P3864&quot;, &quot;P1204&quot;, &quot;P1205&quot;, &quot;P1206&quot;, &quot;P1207&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 1.3&quot;,
        &quot;description&quot;: &quot;贪心&quot;,
        &quot;problems&quot;: [&quot;P1208&quot;, &quot;P1209&quot;, &quot;P1211&quot;, &quot;P1444&quot;, &quot;P3650&quot;, &quot;P2693&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 1.4&quot;,
        &quot;description&quot;: &quot;有技巧的枚举&quot;,
        &quot;problems&quot;: [&quot;P1214&quot;, &quot;P1215&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 1.5&quot;,
        &quot;description&quot;: &quot;二进制数&quot;,
        &quot;problems&quot;: [&quot;P1216&quot;, &quot;P1217&quot;, &quot;P1218&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 2.1&quot;,
        &quot;description&quot;: &quot;图论和洪水填充&quot;,
        &quot;problems&quot;: [&quot;P1457&quot;, &quot;P1458&quot;, &quot;P1459&quot;, &quot;P1460&quot;, &quot;P1461&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 2.2&quot;,
        &quot;description&quot;: &quot;数据结构与动态规划&quot;,
        &quot;problems&quot;: [&quot;P1465&quot;, &quot;P1466&quot;, &quot;P1467&quot;, &quot;P1468&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 2.3&quot;,
        &quot;description&quot;: &quot;&quot;,
        &quot;problems&quot;: [&quot;P1470&quot;, &quot;P1472&quot;, &quot;P1473&quot;, &quot;P1474&quot;, &quot;P1475&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 2.4&quot;,
        &quot;description&quot;: &quot;最短路径&quot;,
        &quot;problems&quot;: [&quot;P1518&quot;, &quot;P1519&quot;, &quot;P1522&quot;, &quot;P1529&quot;, &quot;P1530&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 3.1&quot;,
        &quot;description&quot;: &quot;最小生成树&quot;,
        &quot;problems&quot;: [&quot;P1546&quot;, &quot;P2722&quot;, &quot;P2723&quot;, &quot;P2724&quot;, &quot;P2725&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 3.2&quot;,
        &quot;description&quot;: &quot;背包问题&quot;,
        &quot;problems&quot;: [&quot;P1134&quot;, &quot;P2727&quot;, &quot;P2728&quot;, &quot;P2729&quot;, &quot;P2730&quot;, &quot;P1828&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 3.3&quot;,
        &quot;description&quot;: &quot;欧拉回路&quot;,
        &quot;problems&quot;: [&quot;P2731&quot;, &quot;P2732&quot;, &quot;P1930&quot;, &quot;P2733&quot;, &quot;P2734&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 3.4&quot;,
        &quot;description&quot;: &quot;计算几何&quot;,
        &quot;problems&quot;: [&quot;P1827&quot;, &quot;P2735&quot;, &quot;P2736&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 4.1&quot;,
        &quot;description&quot;: &quot;最优化&quot;,
        &quot;problems&quot;: [&quot;P2737&quot;, &quot;P2738&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 4.2&quot;,
        &quot;description&quot;: &quot;网络流&quot;,
        &quot;problems&quot;: [&quot;P2740&quot;, &quot;P1894&quot;, &quot;P2751&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 4.3&quot;,
        &quot;description&quot;: &quot;高精度&quot;,
        &quot;problems&quot;: [&quot;P2687&quot;, &quot;P2752&quot;, &quot;P2753&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 4.4&quot;,
        &quot;description&quot;: &quot;&quot;,
        &quot;problems&quot;: [&quot;P1344&quot;, &quot;P2739&quot;, &quot;P2741&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 5.1&quot;,
        &quot;description&quot;: &quot;二维凸包&quot;,
        &quot;problems&quot;: [&quot;P2742&quot;, &quot;P2743&quot;, &quot;P2749&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 5.2&quot;,
        &quot;description&quot;: &quot;&quot;,
        &quot;problems&quot;: [&quot;P1560&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 5.3&quot;,
        &quot;description&quot;: &quot;启发式搜索&quot;,
        &quot;problems&quot;: [&quot;P2701&quot;, &quot;P2744&quot;, &quot;P2745&quot;, &quot;P2746&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 5.4&quot;,
        &quot;description&quot;: &quot;&quot;,
        &quot;problems&quot;: [&quot;P1345&quot;, &quot;P2747&quot;, &quot;P2748&quot;]
      },
      {
        &quot;name&quot;: &quot;USACO Section 5.5&quot;,
        &quot;description&quot;: &quot;&quot;,
        &quot;problems&quot;: [&quot;P1709&quot;, &quot;P1856&quot;, &quot;P2750&quot;]
      }
    ]
  }
]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OI in 2020]]></title>
        <id>https://zxh23682.github.io/post/oi-in-2020/</id>
        <link href="https://zxh23682.github.io/post/oi-in-2020/">
        </link>
        <updated>2021-01-05T11:05:50.000Z</updated>
        <content type="html"><![CDATA[<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2020</mn></mrow><annotation encoding="application/x-tex">2020</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span></span></span></span>，学习 OI 的第二年。</p>
<hr>
<h3 id="20201">2020.1</h3>
<ul>
<li>干 whk。那时 OI 超弱</li>
</ul>
<h3 id="20202">2020.2</h3>
<ul>
<li>
<p>开始上网课。</p>
</li>
<li>
<p>感谢 564 搭建的网站 <code>ericnth.cn</code>。</p>
</li>
<li>
<p>我在那里写了好多文章，电脑水平提升了好多。但 OI 还是很弱。</p>
</li>
</ul>
<h3 id="20205">2020.5</h3>
<ul>
<li>
<p>网课结束。</p>
</li>
<li>
<p>回学校。</p>
</li>
</ul>
<h3 id="20206">2020.6</h3>
<ul>
<li>
<p>放暑假。有更多的时间学 OI。</p>
</li>
<li>
<p>在 6 月 7 日注册了洛谷。</p>
</li>
<li>
<p>OI 转折点。</p>
</li>
</ul>
<h3 id="20207">2020.7</h3>
<ul>
<li>
<p>成为洛谷活跃用户，并从那天开始从来没有间断打卡。</p>
</li>
<li>
<p>在打了一场月赛 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">div2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span></span></span></span> 以后成为绿名。</p>
</li>
</ul>
<h3 id="20208">2020.8</h3>
<ul>
<li>洛谷咕值更新 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>u</mi><mi>g</mi><mi>u</mi><mi>g</mi><mi>u</mi></mrow><annotation encoding="application/x-tex">gugugu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">u</span></span></span></span> 了一个星期，那两个星期中，我写了好多题解。成功在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span> 月红名。</li>
</ul>
<h3 id="20209">2020.9</h3>
<ul>
<li>
<p>开学。OI 学习时间少了。</p>
</li>
<li>
<p>但每天都会做几道题。</p>
</li>
</ul>
<h3 id="202010">2020.10</h3>
<ul>
<li>
<p>在学校 OI 晚课学习。老师讲的很简单。</p>
</li>
<li>
<p>截止到 <code>CSP-J 2020</code> 前，我只学习了简单算法和一些基础数据结构。</p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span> 月中旬初赛。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>62.5</mn><mi>p</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">62.5pts</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mord">2</span><span class="mord">.</span><span class="mord">5</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span>，踩线过。</p>
</li>
<li>
<p>分数线：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>61</mn><mi>p</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">61pts</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mord">1</span><span class="mord mathdefault">p</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span>。</p>
</li>
</ul>
<h3 id="202011">2020.11</h3>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>11</mn></mrow><annotation encoding="application/x-tex">11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span></span></span></span> 月下旬复赛。考场上我像个sb。 /kk</p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>=</mo></mrow><annotation encoding="application/x-tex">2=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>，也没有什么遗憾。确实菜。</p>
</li>
</ul>
<h3 id="202012">2020.12</h3>
<ul>
<li>
<p>总结经验，进一步学习算法与数据结构。</p>
</li>
<li>
<p>注册了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">CF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> 帐号。打了几场 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>i</mi><mi>v</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">div2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">2</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">rating</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span> 到了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>817</mn></mrow><annotation encoding="application/x-tex">817</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">1</span><span class="mord">7</span></span></span></span>。</p>
</li>
</ul>
<h3 id="20201218">2020.12.18</h3>
<ul>
<li>
<p>在机房写了这篇 <code>OI in 2020</code>。</p>
</li>
<li>
<p>希望我能在明年拿到 <code>CSP-J</code> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>=</mo></mrow><annotation encoding="application/x-tex">1=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>，<code>CSP-S</code> 拿奖。</p>
</li>
</ul>
<h3 id="后记">后记</h3>
<ul>
<li>
<p><a href="https://www.luogu.com.cn/blog/zxhlg/post-zhi-ding-2021-nian-pu-ji-zu-xue-xi-an-pai">2021 OI</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/blog/zxhlg/qi-zhong-kao-shi-you-ji">期中考试</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/blog/zxhlg/csp-j-2020-you-ji">CSP-J 2020</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[队列学习笔记]]></title>
        <id>https://zxh23682.github.io/post/dui-lie-xue-xi-bi-ji/</id>
        <link href="https://zxh23682.github.io/post/dui-lie-xue-xi-bi-ji/">
        </link>
        <updated>2020-12-28T10:08:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="队列">队列</h1>
<p>队列 （queue） 是一种具有「先进入队列的元素一定先出队列」性质的表。由于该性质，队列通常也被称为先进先出 <code>（first in first out）</code> 表，简称  <code>FIFO</code> 表。</p>
<p><code>C++ STL</code> 中实现了 队列 <code>std::queue</code> 和 优先队列 <code>std::priority_queue</code> 两个类，定义于头文件 <code>#include &lt;queue&gt;</code> 中。</p>
<p><code>std::queue</code> 是容器适配器，默认的底层容器为双端队列 <code>std::deque</code>。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>T</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">STL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">L</span></span></span></span> 队列操作：</p>
<pre><code class="language-cpp">queue&lt;int&gt; q;
q.empty() //如果队列为空返回true，否则返回false
q.size()  //返回队列中元素的个数
q.pop()   //删除队列首元素但不返回其值
q.front() //回队首元素的值，但不删除该元素
q.push()  //在队尾压入新元素
q.back()  //返回队列尾元素的值，但不删除该元素
</code></pre>
<p>简单队列操作：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int main() {
	queue&lt;int&gt; q;
	for (int i = 0; i &lt; 10; i++) {
		q.push(i);
	}
	if (!q.empty()) {
		cout &lt;&lt; &quot;队列q非空！&quot; &lt;&lt; endl;
		cout &lt;&lt; &quot;q中有&quot; &lt;&lt; q.size() &lt;&lt; &quot;个元素&quot; &lt;&lt; endl;
	}
	cout &lt;&lt; &quot;队头元素为：&quot; &lt;&lt; q.front() &lt;&lt; endl;
	cout &lt;&lt; &quot;队尾元素为：&quot; &lt;&lt; q.back() &lt;&lt; endl;
	for (int j = 0; j &lt; 10; j++) {
		int tmp = q.front();
		cout &lt;&lt; tmp &lt;&lt; &quot; &quot;;
		q.pop();
	}
	cout &lt;&lt; endl;
	if (!q.empty()) {
		cout &lt;&lt; &quot;队列非空！&quot; &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<hr>
<h1 id="数组模拟队列">数组模拟队列</h1>
<p>通常用一个数组模拟一个队列，用两个变量标记队列的首尾。</p>
<pre><code class="language-cpp">int q[SIZE], ql = 1, qr;
</code></pre>
<ul>
<li>
<p>插入元素： <code>q[++qr]=x;</code></p>
</li>
<li>
<p>删除元素： <code>++ql;</code></p>
</li>
<li>
<p>访问队首/队尾： <code>q[ql] / q[qr]</code>。</p>
</li>
<li>
<p>清空队列： <code>ql=1;qr=0;</code></p>
</li>
</ul>
<hr>
<h1 id="特殊的队列">特殊的队列</h1>
<h2 id="双端队列">双端队列</h2>
<p>双端队列是指一个可以在队首或队尾插入或删除元素的队列。相当于是栈与队列功能的结合。具体地，双端队列支持的操作有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span> 个：</p>
<ul>
<li>
<p>在队首插入一个元素</p>
</li>
<li>
<p>在队尾插入一个元素</p>
</li>
<li>
<p>在队首删除一个元素</p>
</li>
<li>
<p>在队尾删除一个元素</p>
</li>
</ul>
<p>数组模拟双端队列的方式与普通队列相同。</p>
<h2 id="循环队列">循环队列</h2>
<p>使用数组模拟队列会导致一个问题：随着时间的推移，整个队列会向数组的尾部移动，一旦到达数组的最末端，即使数组的前端还有空闲位置，再进行入队操作也会导致溢出。这种数组里实际有空闲位置而发生了上溢的现象被称为 “假溢出”。</p>
<p>解决假溢出的办法是采用循环的方式来组织存放队列元素的数组，即将数组下标为 0 的位置看做是最后一个位置的后继。数组下标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的元素，它的后继为 <code>(x + 1) % SIZE</code> 。这样就形成了循环队列。</p>
<p>循环队列的实现：</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
template &lt;typename T&gt;
class LoopQueue {
	public:
		LoopQueue(int c = 10);
		~LoopQueue();
		bool isEmpty();        //队列的判空
		int size();            //队列的大小
		bool push(T t);        //入队列
		bool pop();            //出队列
		T front();            //队首元素

	private:
		int capacity;
		int begin;
		int end;
		T*  queue;
};


template&lt;typename T&gt;
LoopQueue&lt;T&gt;::LoopQueue(int c = 10)
	:capacity(c), begin(0), end(0), queue(nullptr) {
	queue = new T[capacity];
};

template&lt;typename T&gt;
LoopQueue&lt;T&gt;::~LoopQueue() {
	delete[]queue;
}

template &lt;typename T&gt;
bool LoopQueue&lt;T&gt;::isEmpty() {                 //判断循环队列是否为空
	if (begin == end)
		return true;
	return false;
};

template&lt;typename T&gt;
int LoopQueue&lt;T&gt;::size() {
	return (end - begin + capacity) % capacity; //计算循环队列的长度
};

template&lt;typename T&gt;
bool LoopQueue&lt;T&gt;::push(T t) {
	if (end + 1 % capacity == begin) {          //判断队列是否已满
		return false;
	}
	queue[end] = t;
	end = (end + 1) % capacity;
	return true;
};

template &lt;typename T&gt;
bool LoopQueue&lt;T&gt;::pop() {                      //判断队列是否为空
	if (end == begin) {
		return false;
	}
	begin = (begin + 1) % capacity;
	return true;
};

template &lt;typename T&gt;
T LoopQueue&lt;T&gt;::front() {
	if (end == begin) {
		return false;
	}
	return queue[begin];
};

int main() {
	LoopQueue&lt;string&gt; queue(6);
	queue.push(&quot;one&quot;);
	queue.push(&quot;two&quot;);
	queue.push(&quot;three&quot;);
	queue.push(&quot;four&quot;);
	queue.push(&quot;five&quot;);
	cout &lt;&lt; &quot;队列长度&quot; &lt;&lt; queue.size() &lt;&lt; endl;
	while (!queue.isEmpty()) {
		cout &lt;&lt; queue.front() &lt;&lt; endl;
		queue.pop();
	}
	return 0;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdn.net/20180626221620257?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppY2hlbl96aXFp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" loading="lazy"></figure>
<hr>
<h1 id="练习">练习</h1>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1996">P1996 约瑟夫问题</a></li>
</ul>
<p>队列模板题。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n,m;
queue&lt;int&gt; a;
int now = 1;
int main() {
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	for(int i=1; i&lt;=n; i++) a.push(i);
	while(!a.empty()) {
		if (now == m) { 
			printf(&quot;%d &quot;,a.front());
			a.pop();
			now = 1;
		}
		else if (now != m) { 
			now++;
			a.push(a.front());
			a.pop();
		}
	}
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/CF802G">CF802G Fake News (easy)</a></li>
</ul>
<p>把 <code>h e l l o</code> 入队，每次做判断。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
string s;
queue&lt;char&gt; q;
int main() {
	q.push('h');q.push('e');q.push('i');q.push('d');q.push('i');
	cin&gt;&gt;s;
	int len = s.size();
	for (int i=0; i&lt;len; i++) {
		if (s[i] == q.front()) q.pop();
	}
	if (q.empty()) printf(&quot;YES\n&quot;);
	else printf(&quot;NO\n&quot;);
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/CF545D">CF545D Queue</a></li>
</ul>
<p>直接模拟即可，不需要用到队列。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
int a[100005];
long long t = 0;
int ans = 0;
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	for (int i=1; i&lt;=n; i++) scanf(&quot;%d&quot;,&amp;a[i]);
	sort(a + 1,a + n + 1);
	for (int i=1; i&lt;=n; i++) {
		if (t &lt;= a[i]) {
			ans++;
			t += a[i];
		} 
	}
	printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[栈学习笔记]]></title>
        <id>https://zxh23682.github.io/post/zhan-xue-xi-bi-ji/</id>
        <link href="https://zxh23682.github.io/post/zhan-xue-xi-bi-ji/">
        </link>
        <updated>2020-12-28T10:06:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是栈">什么是栈</h1>
<p>栈（stack）是一种线性存储结构，它具有如下特点：</p>
<ul>
<li>
<p>栈中的数据元素遵守 “先进后出” 的原则。</p>
</li>
<li>
<p>限定只能在栈顶进行插入和删除操作。</p>
</li>
</ul>
<hr>
<h1 id="栈的相关概念">栈的相关概念</h1>
<ul>
<li>
<p>栈顶与栈底：允许元素插入与删除的一端称为栈顶，另一端称为栈底。</p>
</li>
<li>
<p>压栈：栈的插入操作，叫做进栈，也称压栈、入栈。</p>
</li>
<li>
<p>弹栈：栈的删除操作，也叫做出栈。</p>
</li>
</ul>
<hr>
<h1 id="栈的常用操作">栈的常用操作</h1>
<ul>
<li>
<p>弹栈，通常命名为 <code>pop</code>。</p>
</li>
<li>
<p>压栈，通常命名为 <code>push</code>。</p>
</li>
<li>
<p>求栈的大小。</p>
</li>
<li>
<p>判断栈是否为空。</p>
</li>
<li>
<p>获取栈顶元素的值。</p>
</li>
</ul>
<hr>
<h1 id="栈的常见分类">栈的常见分类</h1>
<ul>
<li>
<p>基于数组的栈：以数组为底层数据结构时，通常以数组头为栈底，数组头到数组尾为栈顶的生长方向。</p>
</li>
<li>
<p>基于单链表的栈：以链表为底层的数据结构时，以链表头为栈顶，便于节点的插入与删除，压栈产生的新节点将一直出现在链表的头部。</p>
</li>
</ul>
<hr>
<h1 id="栈的操作代码">栈的操作代码</h1>
<p>头文件要包含：<code>#include &lt;stack&gt;</code>。</p>
<p>定义：<code>stack&lt;int&gt; s;</code>。</p>
<pre><code class="language-cpp">s.empty();         //如果栈为空则返回true, 否则返回false;
s.size();          //返回栈中元素的个数
s.top();           //返回栈顶元素, 但不删除该元素
s.pop();           //弹出栈顶元素, 但不返回其值
s.push();          //将元素压入栈顶
</code></pre>
<ul>
<li>基于数组的栈</li>
</ul>
<pre><code class="language-cpp">#include &lt;stack&gt;
#include &lt;iostream&gt;
using namespace std;

int main() {
	stack&lt;int&gt; mystack;
	int sum = 0;
	for (int i = 0; i &lt;= 10; i++) {
		mystack.push(i);
	}
	cout &lt;&lt; &quot;size is &quot; &lt;&lt; mystack.size() &lt;&lt; endl;
	while (!mystack.empty()) {
		cout &lt;&lt; &quot; &quot; &lt;&lt; mystack.top();
		mystack.pop();
	}
	return 0;
}
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Output:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></p>
<pre><code>size is 11
10 9 8 7 6 5 4 3 2 1 0
</code></pre>
<ul>
<li>基于单链表的栈</li>
</ul>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;
template&lt;class T&gt;class Stack {
	private:
		struct Node {
			T data;
			Node *next;
		};
		Node *head;
		Node *p;
		int length;

	public:
		Stack() {
			head = NULL;
			length = 0;
		}
		void push(T n) { //入栈
			Node *q = new Node;
			q-&gt;data = n;
			if (head == NULL) {
				q-&gt;next = head;
				head = q;
				p = q;
			} else {
				q-&gt;next = p;
				p = q;
			}
			length++;
		}

		T pop() { //出栈并且将出栈的元素返回
			if (length &lt;= 0) {
				abort();
			}
			Node *q;
			T data;
			q = p;
			data = p-&gt;data;
			p = p-&gt;next;
			delete(q);
			length--;
			return data;
		}
		int size() { //返回元素个数
			return length;
		}
		T top() { //返回栈顶元素
			return p-&gt;data;
		}
		bool isEmpty() { //判断栈是不是空的
			if (length == 0) {
				return true;
			} else {
				return false;
			}
		}
		void clear() { //清空栈中的所有元素
			while (length &gt; 0) {
				pop();
			}
		}
};
int main() {
	Stack&lt;char&gt; s;
	s.push('a');
	s.push('b');
	s.push('c');
	while (!s.isEmpty()) {
		cout &lt;&lt; s.pop() &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Output:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></p>
<pre><code>c
b
a
</code></pre>
<hr>
<h1 id="练习">练习</h1>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1427">P1427 小鱼的数字游戏</a></li>
</ul>
<p>用栈很方便。直接读入并入栈然后一边输出栈顶一边出栈。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
stack&lt;int&gt; s;
int a;
int main() {
	while(cin&gt;&gt;a) {
		if (a == 0) break;
		s.push(a);		
	}
	while(!s.empty()) {
		cout&lt;&lt;s.top()&lt;&lt;&quot; &quot;;
		s.pop();
	}
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1739">P1739 表达式括号匹配</a></li>
</ul>
<p>直接暴力就行了。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int a,b;
char c[10005];
int main() {
	cin&gt;&gt;c;
	int len = strlen(c);
	for(int i=0; i&lt;len; i++) {
		if(c[i]==')') b++;
		if(b&gt;a) {
			cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;
			return 0;
		}
		if(c[i]=='(') a++;
	}
	if(a!=b) {
		cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;
		return 0;
	}
	cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1044">P1044 栈</a></li>
</ul>
<p>其实就是递推卡特兰数。</p>
<p>解释一下原理：</p>
<p>建立数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>i</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 个数的全部可能性。</p>
<p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 为当前出栈序列的最后一个，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 种取值。</p>
<p>由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 是最后一个出栈的，所以可以将已经出栈的数分成两部分：</p>
<ul>
<li>
<p>比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 小</p>
</li>
<li>
<p>比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 大</p>
</li>
</ul>
<p>比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 小的数有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个，所以这些数的全部出栈可能为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">f[x-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>。</p>
<p>比 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 大的数有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">n-x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 个，所以这些数的全部出栈可能为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>n</mi><mo>−</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[n-x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>。</p>
<p>这两部分互相影响，所以一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的取值能够得到的所有可能性为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>[</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mi>f</mi><mo>[</mo><mi>n</mi><mo>−</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">f[x-1] * f[n-x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>。</p>
<p>另外，由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个取值，所以</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>f</mi><mo>[</mo><mn>0</mn><mo>]</mo><mo>∗</mo><mi>f</mi><mo>[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>+</mo><mi>f</mi><mo>[</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mi>f</mi><mo>[</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>f</mi><mo>[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>]</mo><mo>∗</mo><mi>f</mi><mo>[</mo><mn>0</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">ans = f[0]*f[n-1] + f[1]*f[n-2] + ... + f[n-1]*f[0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n, f[30];
int main() {
	scanf(&quot;%d&quot;, &amp;n);
	f[0] = 1, f[1] = 1;
	for(int i=2; i&lt;=n; i++)for(int j=0; j&lt;i; j++)f[i] += f[j] * f[i-j-1];  
	printf(&quot;%d\n&quot;, f[n]);
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1165">P1165 日志分析</a></li>
</ul>
<p>先入后出，很经典的栈操作题。由于数据量大，难度在最大值的求法，暴力搜是不行的。需要引入辅助栈。 辅助栈专门记录栈当前的最大值。如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>u</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">push</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span></span></span></span> 值大于辅助栈的头元素，则辅助栈中压入要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>u</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">push</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span></span></span></span> 的值，否则重复压入辅助栈的头元素。比如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 栈为主栈，输入数据依次入栈：<code>1 2 3 5 4</code>； <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 栈为辅栈，记录对应的最大值：<code>1 2 3 5 5</code>； 弹出时，两栈同时弹出即可。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
int m;
int x;
stack&lt;int&gt; a;
stack&lt;int&gt; b;
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	while(n--) {
		scanf(&quot;%d&quot;,&amp;m);
		if(m == 0) {
			scanf(&quot;%d&quot;,&amp;x);
			a.push(x);
			if(b.empty() || x &gt; b.top()) b.push(x);
			else b.push(b.top());
		} else if(m == 1) {
			a.pop();
			b.pop();
		} else {
			if(b.empty()) printf(&quot;0\n&quot;);
			else printf(&quot;%d\n&quot;,b.top());
		}
	}
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1976">P1976 鸡蛋饼</a></li>
</ul>
<p>这题就是卡特兰数。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Catalan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 数的定义令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h(1)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Catalan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 数满足递归式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>h</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>∗</mo><mi>h</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>h</mi><mo>(</mo><mn>2</mn><mo>)</mo><mo>∗</mo><mi>h</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo>)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>h</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mi>h</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">h(n) = h(1)*h(n-1) + h(2)*h(n-2) + ... + h(n-1)h(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n&gt;=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 该递推关系的解为：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>C</mi><mo>(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">h(n) = C(2n-2,n-1)/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span>。其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>(</mo><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">C(2n-2,n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 个中取 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个的组合数</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
#define mod 100000007
typedef long long ll;
int n;
ll f[10005];
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	f[0] = 1; f[1] = 1;
	for(int i=2; i&lt;=n; i++)for(int j=0; j&lt;=i-1; j++)f[i] = (f[j] * f[i - j - 1] % mod + f[i]) % mod;
	printf(&quot;%lld\n&quot;,f[n]);
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P6704">P6704 [COCI2010-2011#7] GITARA</a></li>
</ul>
<p>用一个栈来储存一个弦的各个段，记为 <code>stack&lt;int&gt; s[10];</code>。</p>
<p>因为可能有一个音调要可松开多次，所以用一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">while</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span></span></span></span> 循环，每一次循环弹出栈顶，其条件为栈不为空和栈顶值大于段号。</p>
<p>特判当栈顶与段号相同时，直接跳过。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n,p;
int a,b;
int ans=0;
stack&lt;int&gt; s[10];
int main() {
	scanf(&quot;%d%d&quot;,&amp;n,&amp;p);
	for(int i=1; i&lt;=n; i++) {
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		while(!s[a].empty() &amp;&amp; s[a].top() &gt; b) {
			ans++;
			s[a].pop();
		}
		if(!s[a].empty()) {
			if(s[a].top() == b) continue;
			else {
				ans++;
				s[a].push(b);
			}
		} else {
			ans++;
			s[a].push(b);
		}
	}
	printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
<ul>
<li>
<p><a href="https://www.luogu.com.cn/problem/P2866">P2866 [USACO06NOV]Bad Hair Day S</a></p>
</li>
<li>
<p>每次输入一头牛的身高，找比这头牛矮的，出栈。</p>
</li>
<li>
<p>剩下的牛都可以看到这只牛。</p>
</li>
<li>
<p>答案加等于栈中牛的个数。</p>
</li>
<li>
<p>这头牛入栈。</p>
</li>
</ul>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
int n;
int t;
ll ans = 0; 
stack &lt;int&gt; a;
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	while(n--) {
		scanf(&quot;%d&quot;,&amp;t);
		while (!a.empty() &amp;&amp; a.top() &lt;= t) a.pop();
		ans += a.size();
		a.push(t);
	}
	printf(&quot;%lld\n&quot;,ans);
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P2947">P2947 [USACO09MAR]Look Up S</a></li>
</ul>
<p>单调栈。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
struct lx_jhyh {
	int h;
	int p;
}; 
stack&lt;lx_jhyh&gt; s;
int n;
int x;
int ans[100005];
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	for (int i=1; i&lt;=n; i++) {
		scanf(&quot;%d&quot;,&amp;x);
		while (s.size() &amp;&amp; x &gt; s.top().h) ans[s.top().p] = i , s.pop();
		s.push((lx_jhyh){x,i});
	}
	for (int i=1; i&lt;=n; i++) printf(&quot;%d\n&quot;,ans[i]);
	return 0;
}
</code></pre>
<hr>
<p>推荐练习：</p>
<ul>
<li>
<p><a href="https://www.luogu.com.cn/problem/list?tag=287&amp;difficulty=2&amp;page=1">难度一</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/list?tag=287&amp;difficulty=3&amp;page=1">难度二</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[分治学习笔记]]></title>
        <id>https://zxh23682.github.io/post/fen-zhi-xue-xi-bi-ji/</id>
        <link href="https://zxh23682.github.io/post/fen-zhi-xue-xi-bi-ji/">
        </link>
        <updated>2020-12-21T11:01:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="概念">概念</h1>
<p>分治法就是：把一个复杂的问题分解成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题。直到最后子问题可以简单的 直接求解 （各个击破），原问题的解即子问题的解的合并。</p>
<hr>
<h1 id="基本步骤">基本步骤</h1>
<ul>
<li>
<p>第一步 分： 将原来复杂的问题分解为若干个规模较小、相互独立、与原问题形式相同的子问题，分解到可以直接求解为止。</p>
</li>
<li>
<p>第二步 治： 此时可以直接求解。</p>
</li>
<li>
<p>第三步 合： 将小规模的问题的解合并为一个更大规模的问题的解，自底向上逐步求出原来问题的解。</p>
</li>
</ul>
<hr>
<h1 id="算法基本模型">算法基本模型</h1>
<pre><code class="language-cpp">Divide_and_Conquer(P){
    if(xxx) //递归出口：如果规模足够小，克制直接求解，则开始“治”
        return ADHOC(P); //ADHOC是治理可直接求解子问题的子过程
     
    &lt;divide P into smaller subinstances P1,P2,...Pk&gt;; //将P“分”解为k个子问题
     
    for(int i = 0; i &lt; k; ++i)
        yi = Divide_and_Conquer(Pi); //递归求解各个子问题
     
    return merge(y1, y2, ..., yk); //将各个子问题的解“合”并为原问题的解
}


</code></pre>
<p>设计划分策略，把原问题 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 分解成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> 个规模较小的子问题，这个步骤是分支算法的基础和关键。需要遵循两个原则：</p>
<ul>
<li>
<p>平衡子问题原则：分解出的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个子问题规模最好大致相当；</p>
</li>
<li>
<p>独立子问题原则：分解出的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个子问题之间重叠越少越好，最好  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 个子问题相互独立，不存在重叠子问题。</p>
</li>
</ul>
<hr>
<h1 id="二分查找">二分查找</h1>
<p>二分查找跨度大，速度快，枚举的跨度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，所以慢<br>
二分是折半的，时间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。<br>
参数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">aTarget</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span></span></span></span> 是目标数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>D</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">aData</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span></span></span></span> 是数列，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 是数组长度<br>
如果按照枚举的方法，是这样的：</p>
<pre><code class="language-cpp">bool Search(int aTarget, int aData[], int n) {
	for (int i = 0; i &lt; n; i++)
		if (aData[i] == aTarget)
			return true;
	return false;
}
</code></pre>
<p>但如果数据范围大的话，这种方式效率会很低。</p>
<p>于是二分查找出现了！</p>
<p>数组方法如下：</p>
<pre><code class="language-cpp">bool binarySearch(int aTarget, int aData[], int n) {
	int left = 0, right = n - 1;
	while (left &lt;= right) {
		mid = (left + right) / 2;
		if (aData[mid] == aTarget)
			return true;
		else if (aData[mid] &lt; aTarget)
			left = mid + 1;
		else
			right = mid - 1;
	}
	return false;
}
</code></pre>
<p>换成动态数组更简单了：</p>
<pre><code class="language-cpp">bool binarySearch(int aTarget, vector&lt;int&gt; aData) {
	int left = 0, right = aData.size();
	while (left &lt;= right) {
		mid = (left + right) / 2;
		if (aData[mid] == aTarget)
			return true;
		else if (aData[mid] &lt; aTarget)
			left = mid + 1;
		else
			right = mid - 1;
	}
	return false;
}
</code></pre>
<p>最简单的还是 <code>algorithm</code> 库中的函数。</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20200502114057150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nvb2w5OTc4MQ==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></figure>
<hr>
<h1 id="快速排序">快速排序</h1>
<p>这是一个经典的分治，用一个动图来演示。</p>
<figure data-type="image" tabindex="2"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cucnVub29iLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wOS9Tb3J0aW5nX3F1aWNrc29ydF9hbmltLmdpZg" alt="" loading="lazy"></figure>
<p>它的基本原理是基准数。</p>
<p>迭代法：</p>
<pre><code class="language-cpp">typedef struct _Range {
	int start, end;
} Range;
Range new_Range(int s, int e) {
	Range r;
	r.start = s;
	r.end = e;
	return r;
}
void swap(int *x, int *y) {
	int t = *x;
	*x = *y;
	*y = t;
}
void quick_sort(int arr[], const int len) {
	if (len &lt;= 0)
		return; // 避免len等於負值時引發段錯誤（Segment Fault）
	// r[]模擬列表,p為數量,r[p++]為push,r[--p]為pop且取得元素
	Range r[len];
	int p = 0;
	r[p++] = new_Range(0, len - 1);
	while (p) {
		Range range = r[--p];
		if (range.start &gt;= range.end)
			continue;
		int mid = arr[(range.start + range.end) / 2]; // 選取中間點為基準點
		int left = range.start, right = range.end;
		do {
			while (arr[left] &lt; mid) ++left;   // 檢測基準點左側是否符合要求
			while (arr[right] &gt; mid) --right; //檢測基準點右側是否符合要求

			if (left &lt;= right) {
				swap(&amp;arr[left],&amp;arr[right]);
				left++;
				right--;               // 移動指針以繼續
			}
		} while (left &lt;= right);

		if (range.start &lt; right) r[p++] = new_Range(range.start, right);
		if (range.end &gt; left) r[p++] = new_Range(left, range.end);
	}
}
</code></pre>
<p>递归法：</p>
<pre><code class="language-cpp">void swap(int *x, int *y) {
	int t = *x;
	*x = *y;
	*y = t;
}
void quick_sort_recursive(int arr[], int start, int end) {
	if (start &gt;= end)
		return;
	int mid = arr[end];
	int left = start, right = end - 1;
	while (left &lt; right) {
		while (arr[left] &lt; mid &amp;&amp; left &lt; right)
			left++;
		while (arr[right] &gt;= mid &amp;&amp; left &lt; right)
			right--;
		swap(&amp;arr[left], &amp;arr[right]);
	}
	if (arr[left] &gt;= arr[end])
		swap(&amp;arr[left], &amp;arr[end]);
	else
		left++;
	if (left)
		quick_sort_recursive(arr, start, left - 1);
	quick_sort_recursive(arr, left + 1, end);
}
void quick_sort(int arr[], int len) {
	quick_sort_recursive(arr, 0, len - 1);
}
</code></pre>
<h1 id="练习">练习</h1>
<ul>
<li><code>Hanoi</code> 塔问题</li>
</ul>
<p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span> 个塔座。开始时，在塔座 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 上有一叠共 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个圆盘，这些圆盘自下而上，由大到小地叠在一起。各圆盘从小到大编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1,2,…,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，现要求将塔座 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> 上的这一叠圆盘移到塔座 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 上，并仍按同样顺序叠置。在移动圆盘时应遵守以下移动规则：</p>
<p>规则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>：每次只能移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个圆盘；</p>
<p>规则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>：任何时刻都不允许将较大的圆盘压在较小的圆盘之上；</p>
<p>规则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>：在满足移动规则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span> 的前提下，可将圆盘移至 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a,b,c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span></span></span></span> 中任一塔座上。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
void hanoi(int n,char one,char two,char three) {
	void move(char x,char y);
	if(n==1) move(one,three);
	else {
		hanoi(n-1,one,three,two);
		move(one,three);
		hanoi(n-1,two,one,three);
	}
}
void move(char x,char y) {
	printf(&quot;%c-&gt;%c\n&quot;,x,y);
}
int main() {
	int m; //盘子数量
	scanf(&quot;%d&quot;,&amp;m);
	hanoi(m,'A','B','C');
	return 0;
}
</code></pre>
<ul>
<li>砍树</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20200502114143620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nvb2w5OTc4MQ==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></figure>
<p>用枚举显然不行，于是想到二分。</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;cstdio&gt;
using namespace std;
int main() {
	vector&lt;int&gt;trees;
	int n, m;
	cin &gt;&gt; n &gt;&gt; m;
	for (int i = 0; i &lt; n; i++) {
		int tmp;
		cin &gt;&gt; tmp;
		trees.push_back(tmp);
	}
	sort(trees.begin(), trees.end());
	//inend
//	printf(&quot;trees[trees.size() - 1] = %d\n&quot;, trees[trees.size() - 1]);
	int left = 1, right = trees[trees.size() - 1];
	int ans;
//	printf(&quot;----\n&quot;);
	while (left &lt;= right) {
		int all = 0;
		int mid = (left + right) / 2;
	//	printf(&quot;left = %d, right = %d, mid = %d\n&quot;, left, right, mid);
		for (int i = 0; i &lt; trees.size(); i++)
			if (trees[i] - mid &lt; 0)
				all += 0;
			else
				all += trees[i] - mid;
		cout &lt;&lt; &quot;all:&quot; &lt;&lt; all &lt;&lt; endl;
		if (all &lt; m)
			left = mid + 1;
		else
			right = mid - 1;
		ans = all;
	}
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1885">P1885 Moo</a></li>
</ul>
<p>分治 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span></span></span></span> 递归。</p>
<p>两个函数分别是初始化和解决问题。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
string str;
int cnt = 0;
int t[100005];
int start(int p) {
	int now,i = 1;
	t[0] = 0;
	while(1) {
		t[i] = 2*t[i-1]+(i+2);
		if(t[i] &gt;= p) {
			now = i;
			break;
		}
		i++;
	}
	return now;
}
void solve(int q,int n) {
	while(t[q-1] &gt; n) q--;
	if(n == t[q-1]+1) {
		printf(&quot;m\n&quot;);
		return ;
	} else if(n &lt;= t[q-1]+q+2) {
		printf(&quot;o\n&quot;);
		return ;
	}
	solve(q-1,n-(t[q-1]+q+2));
}
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	cnt = start(n);
	solve(cnt,n);
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1115">P1115 最大子段和</a></li>
</ul>
<p>一道经典入门 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">dp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span></span></span></span> 题。也可以用分治做。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">dp:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
int a[200005];
int main() {
	scanf(&quot;%d&quot;,&amp;n);
	for (int i=1; i&lt;=n; i++) scanf(&quot;%d&quot;,&amp;a[i]);
	int sum = -99999999;
	int ans[200005];
	memset(ans,0,sizeof(ans));
	for (int i=1; i&lt;=n; i++) {
		ans[i] = max(ans[i-1] + a[i] , a[i]);
		sum = max(sum , ans[i]);
	}
	printf(&quot;%d\n&quot;,sum);
	return 0;
}
</code></pre>
<p>分治：</p>
<p>首先，假定有区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>l</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[l..r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>，其中间位置为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span>，其最大子段为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>i</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[i..j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>。那么显然，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 必定符合下列三种情况之一：</p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>m</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">l≤i≤j≤mid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>≤</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>&lt;</mo><mi>j</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">i≤mid&lt;j≤r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>&lt;</mo><mi>i</mi><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">mid&lt;i≤j≤r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></p>
</li>
</ul>
<p>只需要分别求出三种情况下的值，取其最大的即可。</p>
<p>其中，很容易求出第二种情况，即求出区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>i</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>m</mi><mi>i</mi><mi>d</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[i..mid]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span> 与区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1..</mn><mi>j</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[mid+1..j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，将其相加即可。复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>不难发现，第一种情况，其实就是求区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>1..</mn><mi>m</mi><mi>i</mi><mi>d</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[1..mid]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">]</span></span></span></span> 中的最大值，第三种情况就是求区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1..</mn><mi>r</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[mid+1..r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 中的最大值。那么，只需递归求出即可。</p>
<p>显然，该解法的复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n ,arr[200005];
const int minn = -99999999;
int Max( int a , int b) {
	return a &gt; b ? a : b ;
}
int rec( int l , int r ) {
	if ( l == r ) return arr[l];
	int mid = ( l + r ) &gt;&gt; 1;
	int sum = 0 , ret1 = minn , ret2 = minn; //ret1为[l..mid]区间内包含mid的最大子段和，ret2为[mid+1..r]区间内包含(mid+1)的最大子段和
	for( int i = mid ; i &gt;= l ; i-- ) {
		sum += arr[i];
		ret1 = Max( ret1 , sum );
	}  //求出[i..mid]区间最大值
	sum = 0;
	for( int i = mid+1 ; i &lt;= r ; i++ ) {
		sum += arr[i];
		ret2 = Max( ret2 , sum );
	}  //求出[mid+1..r]区间最大值
	return Max( Max( rec( l , mid ) , rec( mid + 1 , r ) ) , ret1 + ret2 );   //返回可能一 可能二 可能三 中的最大值
}
int main() {
	scanf(&quot;%d&quot;, &amp;n );
	for( int i = 1 ; i &lt;= n ; i++ ) scanf(&quot;%d&quot; , &amp;arr[i] );
	printf(&quot;%d\n&quot; , rec(1 , n) );
	return 0;
}
</code></pre>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1498">P1498 南蛮图腾</a></li>
</ul>
<p>用分治很简单. 每次向下复制一下,向右复制一下,再向上复制一下。</p>
<pre><code>   /\
  /__\
 /\  /\
/__\/__\
</code></pre>
<p>向下和向右，顺便把原本的清除：</p>
<pre><code>





   /\      /\
  /__\    /__\
 /\  /\  /\  /\
/__\/__\/__\/__\
</code></pre>
<p>再向上：</p>
<pre><code>       /\
      /__\
     /\  /\
    /__\/__\
   /\      /\
  /__\    /__\
 /\  /\  /\  /\
/__\/__\/__\/__\
</code></pre>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
char a[3005][3005];
int h=2,w=4; //h是高,w是宽
int main() {
	cin&gt;&gt;n;
	memset(a,' ',sizeof(a));
	a[1][1]=a[1][4]=' ';
	a[1][2]=a[2][1]='/';
	a[1][3]=a[2][4]='\\';
	a[2][2]=a[2][3]='_';
	for(int i=1; i&lt;n; i++) {
		//向下和向右
		for(int j=1; j&lt;=h; j++) {
			for(int k=1; k&lt;=w; k++) {
				a[j+h][k]=a[j+h][k+w]=a[j][k];
				a[j][k]=' '; //把上面的清掉
			}
		}
		//向上
		for(int j=1; j&lt;=h; j++) {
			for(int k=1; k&lt;=w; k++) {
				a[j][k+w/2]=a[j+h][k];
			}
		}
		w*=2;
		h*=2;
	}
	for(int i=1; i&lt;=h; i++) {
		for(int j=1; j&lt;=w; j++) cout&lt;&lt;a[i][j];
		cout&lt;&lt;endl;
	}
	return 0;
}
</code></pre>
<hr>
<p>推荐练习：</p>
<ul>
<li>
<p><a href="https://www.luogu.com.cn/problem/list?tag=112&amp;difficulty=2&amp;page=1">难度1</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/list?tag=112&amp;difficulty=3&amp;page=1">难度2</a></p>
</li>
<li>
<p><a href="https://www.luogu.com.cn/problem/list?tag=112&amp;difficulty=4&amp;page=1">难度3</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[贪心学习笔记]]></title>
        <id>https://zxh23682.github.io/post/tan-xin-xue-xi-bi-ji/</id>
        <link href="https://zxh23682.github.io/post/tan-xin-xue-xi-bi-ji/">
        </link>
        <updated>2020-12-20T01:29:47.000Z</updated>
        <content type="html"><![CDATA[<p>早就应该写了。现在来补</p>
<hr>
<h1 id="概念">概念</h1>
<p>贪心算法又叫登山算法，它的根本思想是逐步到达山顶，即逐步获得最优解，是解决最优化问题时的一种简单但是适用范围有限的策略。</p>
<p>贪心算法没有固定的框架，算法设计的关键是贪婪策略的选择。贪心策略要无后向性，也就是说某状态以后的过程不会影响以前的状态，至于当前状态有关。</p>
<p>贪心算法是对某些求解最优解问题的最简单、最迅速的技术。某些问题的最优解可以通过一系列的最优的选择即贪心选择来达到 。但局部最优并不总能获得整体最优解，但通常能获得近似最优解。</p>
<p>在每一部贪心选择中，只考虑当前对自己最有利的选择，而不去考虑在后面看来这种选择是否合理。</p>
<hr>
<h1 id="贪心算法求解事应考虑的问题">贪心算法求解事应考虑的问题</h1>
<ul>
<li>候选集合</li>
</ul>
<p>为了构造问题的解决方案，有一个候选集合 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 作为问题的可能解，问题的最终解均取自于候选集合 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>。</p>
<ul>
<li>解集合 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span></li>
</ul>
<p>随着贪心选择的进行，解集合不断扩展，直到构成一个满足问题的完整解。</p>
<ul>
<li>解决函数</li>
</ul>
<p>检查解集合是否构成问题的完整解。</p>
<ul>
<li>选择函数</li>
</ul>
<p>即贪心策略，这是贪心算法的关键，它指出哪个候选对象有希望构成成问题的解。</p>
<ul>
<li>可行函数</li>
</ul>
<p>检查解集合中加入一个候选对象是否可行，即解集合扩展后是否满足约束条件。</p>
<hr>
<h1 id="贪心算法的基本步骤">贪心算法的基本步骤</h1>
<ul>
<li>
<p>从问题的某个初始解出发</p>
</li>
<li>
<p>采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个不分解，缩小问题的范围或规模。</p>
</li>
<li>
<p>将所有的部分解综合起来，得到问题的最终解。</p>
</li>
</ul>
<pre><code class="language-cpp">Greedy(C){ //C是问题的输入集合即候选集合
	S = {}; //初始解集合为空
		while(not solution(S)){ //集合S没有构成问题的一个解
				x = select(C); //在候选集合C中做贪心选择
				if feasible(S,x); //判断集合加入x后的解是否可行
					S += {x};
					C -= {s};
		}
		return S;
}
</code></pre>
<hr>
<h1 id="贪心策略选择">贪心策略选择</h1>
<p>贪心算法的原理是通过局部最优来达到全局最优，采用的是逐步构造最优解的方法。在每个阶段，都做出一个看上去最优的，决策一旦做出，就不再更改。</p>
<p>要选出最优解可不是一件容易的事，要证明局部最优为全局最优，要进行数学证明，否则就不能说明为全局最优。</p>
<p>很多问题表面上看来用贪心算法可以找到最优解，实际上却把最优解给漏掉了。这就像现实生活中的 “贪小便宜吃大亏” 。所以我们在解决问题的时候，一定要谨慎使用贪心算法，一定要注意这个问题适不适合采用贪心算法。</p>
<p>贪心算法很多时候并不能达到全局最优，为什么我们还要使用它呢？</p>
<p>因为在很多大规模问题中，寻找最优解是一件相当费时耗力的事情，有时候付出大量人力物力财力后，回报并不与投入成正比。在这个时候选择相对最优的贪心算法就比较经济可行了。有的问题对最优的要求不是很高，在充分衡量付出和回报后，选择贪心算法未尝不是一种不错的选择。</p>
<hr>
<h1 id="练习">练习</h1>
<h2 id="题目">题目：</h2>
<ul>
<li>组成新数最小</li>
</ul>
<p>键盘输入一个较大的正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，去掉其中任意 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 个数字后剩下的数字按原左右次序将组成一个新的正整数。对于给定的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>，通过编程寻找一种方案使得剩下的数字组成的新数最小。</p>
<p>输出应包括所去掉的数字的位置和组成的新的正整数。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>240</mn></msup></mrow><annotation encoding="application/x-tex">1≤n≤10^{240}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">4</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>s</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">0≤s≤20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span>。</p>
<h2 id="思路">思路：</h2>
<p>因为输入的数字比较大，将输入的数字存储为字符串格式，在删除时记录删除的位置。</p>
<p>如果让高位的数字尽量小，数字的总值就小。</p>
<p>从高位到低位，让相邻的数字进行比较（总是让左边数字的与右边的数字比较），如果高位的数字比低位大，就把高位删除。</p>
<p>如果比较过后删除了高位，那么将低位与删除的高位的左边数字进行比较，如果高位数字大，把高位删除。</p>
<p>即删除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 位后，必须向前考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 位与第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 位进行比较。</p>
<p>例如：</p>
<pre><code>n = 2 3 1 1 8 3。
3 比 1 大删除：n = 2 空 1 1 8 3
2 比 1 大删除：n = 空 空 1 1 8 3
8 比 3 大删除：n = 空 空 1 1 空 3
即删除 i 位后，必须向前考虑 i-1 位与第 i+1 位进行比较
</code></pre>
<p>如果前面高位出现 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，这里不考虑。</p>
<p>如果数字全是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，应该保留一个零。</p>
<p>如果比较一遍删除的位数不够 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>，就考虑删除后几位。</p>
<p>在下面代码中，用字符 <span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 1: #̲'>#</span> 来表示数字删除，处理的时候再把 <span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 1: #̲'>#</span> 一起删除。</p>
<p>保证数据正确有解。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Code:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
string index=&quot;&quot;; //记录删除的下标
int count=0; //删除的次数
int main() {
	string tanxin(string num,int s); //贪心算法函数
	string process(string minnum); //处理函数
	int s; //要删除的位数
	string a;
	cin&gt;&gt;a;
	string num=a; //为了方便定义的时候初始化
	string minnum;
	cout&lt;&lt;&quot;请输入您想要去掉几个数字：&quot;;
	cin&gt;&gt;s;
	minnum=tanxin(num,s);
	cout&lt;&lt;&quot;开始数字为：&quot;&lt;&lt;num&lt;&lt;endl;
	cout&lt;&lt;&quot;处理过后的结果为:&quot;;
	cout&lt;&lt;process(minnum)&lt;&lt;endl;
	cout&lt;&lt;&quot;删除的下标为:&quot;;
	cout&lt;&lt;index&lt;&lt;endl;
	return 0;
}
string tanxin(string num,int s) {
	int i,j;
	string result=num;
	for(i=0; i&lt;num.size()&amp;&amp;count&lt;s; i++) {
		if(result[i]&gt;result[i+1]) {
			result[i]='#'; //置#代表删除
			index.insert(index.size(),std::to_string(i)); //在尾部插入
			count++;
			if((i-1&gt;=0)&amp;&amp;result[i-1]&gt;result[i+1]) {
				result[i-1]='#';
				index.insert(index.size(),std::to_string(i-1)); //在尾部插入
				count++;
			}
		}
	}
	if(count&lt;s) { //没有删除s次
		int s0=s-count;
		for(i=result.size()-1; i&gt;=s0; i--) {
			result[i]='#';
		}
	}
	return result;
}
string process(string minnum) { //处理找到的字符串
	string result=minnum,resultsum=&quot;&quot;;
	int i,temp=0;
	//判断前端是否有多余0
	for(i=0; i&lt;minnum.size(); i++) {
		if(result[i]=='0'&amp;&amp;result[i]=='#') { //前面有不为0 且不为#的数字,把标识变量置1
			temp=1;
		}
		if(result[i]=='0'&amp;&amp;temp==0) {
			result[i]='#';
		}
	}
	//去除占位符#
	for(i=0; i&lt;result.size(); i++) {
		if(result[i]!='#') resultsum += result[i]; //拼接
	}
	return resultsum;
}
</code></pre>
<p><strong>注意：以上代码需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>+</mo><mo>+</mo><mn>11</mn></mrow><annotation encoding="application/x-tex">C++11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord">1</span></span></span></span></strong>。</p>
<p>样例：</p>
<pre><code>input:

231183
3

output:

请输入您想要去掉几个数字：开始数字为：231183
处理过后的结果为:113
删除的下标为:104

</code></pre>
<hr>
<h2 id="题目-2">题目：</h2>
<ul>
<li><a href="https://www.luogu.com.cn/problem/P1181">P1181 数列分段Section I</a></li>
</ul>
<h2 id="思路-2">思路：</h2>
<p>对于当前元素只有两种选择 并到其他段上和单独一段。</p>
<p>当前元素能找到和在一起的段就并上，找不到就自己就自己一段。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">ans</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span></span></span></span> 一开始设置为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，因为还要并 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 号元素，每并一次少一段。</p>
<p>用到的是贪心想法。</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n,m;
int a[100005];
int ans;
int main() {
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	ans = n + 1;
	for (int i=1; i&lt;=n; i++) scanf(&quot;%d&quot;,&amp;a[i]);
	for (int i=1; i&lt;=n; i++) {
		if(a[i] + a[i-1] &lt;= m) {
			a[i] += a[i-1];
			ans--;
		}
	}
	printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
<p>本篇学习笔记编写结束</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自动删犇器]]></title>
        <id>https://zxh23682.github.io/post/zi-dong-shan-ben-qi/</id>
        <link href="https://zxh23682.github.io/post/zi-dong-shan-ben-qi/">
        </link>
        <updated>2020-12-20T01:28:37.000Z</updated>
        <content type="html"><![CDATA[<p>在洛谷主页 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mn>12</mn></mrow><annotation encoding="application/x-tex">F12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">1</span><span class="mord">2</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>n</mi><mo>+</mo><mi>F</mi><mn>12</mn></mrow><annotation encoding="application/x-tex">Fn+F12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">1</span><span class="mord">2</span></span></span></span>，进入控制台 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>o</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">console</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span></span></span></span>。</p>
<p>输入 <code>allow pasting</code> 后回车。</p>
<p>输入下面的代码并回车：</p>
<pre><code>switchMode('my');
function load() {
    console.log('page ' + feedPage);
     $.get(&quot;/feed/&quot; + feedMode + &quot;?page=&quot; + feedPage, function (resp) {
		$feed.append(resp);
         $(&quot;#feed-more&quot;).children(&quot;a&quot;).text(&quot;点击查看更多...&quot;)
		$(&quot;[name=feed-delete]&quot;).click(function () {
             $.post(&quot;/api/feed/delete/&quot; + $(this).attr('data-feed-id'), function () {
                switchMode('all');
            })
        }); feedPage++;
        if (resp.indexOf('没有更多动态了') != -1) console.log('finished');
        else setTimeout(load, 200);
    });
}
setTimeout(load, 1000)
</code></pre>
<p>等待数字停止后，输入下面一段代码并回车：</p>
<pre><code>var l =  $('#feed &gt; li &gt; div.am-comment-main &gt; header &gt; div &gt; a:nth-child(2)');
function f(i) {
$.post(&quot;/api/feed/delete/&quot;+ $(l[i]).attr('data-feed-id'), function() {
console.log(i);
if(i&lt;l.length-1)setTimeout(`f(${i+1})`,200);
})
}
f(0);
</code></pre>
<p>等待数字停止，犇犇就删完了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1462A 【Favorite Sequence】]]></title>
        <id>https://zxh23682.github.io/post/ti-jie-cf1462a-favorite-sequence/</id>
        <link href="https://zxh23682.github.io/post/ti-jie-cf1462a-favorite-sequence/">
        </link>
        <updated>2020-12-16T10:14:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="题意">题意：</h3>
<p>给定一个数组，一头一尾地输出它。</p>
<h3 id="思路">思路：</h3>
<p>定义 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">head</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">tail</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 分别初始化为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和数组长度，判断数组长度的奇偶性，分别进行讨论。每一次输出完后 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">head</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>i</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">tail</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p>
<h3 id="code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Code:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></h3>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int T;
int n;
long long b[305];
int main() {
	scanf(&quot;%d&quot;,&amp;T);
	while(T--) {
		scanf(&quot;%d&quot;,&amp;n);
		for (int i=1; i&lt;=n; i++) scanf(&quot;%lld&quot;,&amp;b[i]);
		if (n%2 == 0) { //分奇偶讨论
			int head=1,tail=n;
			while(head &lt;= tail) {
				printf(&quot;%lld %lld &quot;,b[head],b[tail]); //输出头和尾的数
				head++;
				tail--;
			}
		}
        else {
        	int head=1,tail=n;
        	while(head &lt; tail) {
        		printf(&quot;%lld %lld &quot;,b[head],b[tail]); //输出头和尾的数
				head++;
				tail--;
			}
			printf(&quot;%lld&quot;,b[n/2+1]); //输出中间的数
		}
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 CF1415A 【Prison Break】]]></title>
        <id>https://zxh23682.github.io/post/ti-jie-cf1415a-prison-break/</id>
        <link href="https://zxh23682.github.io/post/ti-jie-cf1415a-prison-break/">
        </link>
        <updated>2020-12-09T10:13:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="题意">题意：</h3>
<p>求方阵上每一个点到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 的曼哈顿距离的最大值。</p>
<hr>
<h3 id="思路">思路：</h3>
<p>既然每一个点都要到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span>，那么最少用的时间一定是用时最长的情况下所用的时间。</p>
<p>我们容易知道：与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 曼哈顿距离最大的点一定是四个顶点，即左上角，右上角，左下角，右下角其中的一个。</p>
<p>左上角坐标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(1,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 的曼哈顿距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>+</mo><mi>c</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">r+c-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>。</p>
<p>右上角坐标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(1,m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 的曼哈顿距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>−</mo><mn>1</mn><mo>+</mo><mi>m</mi><mo>−</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">r-1+m-c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>。</p>
<p>左下角坐标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo separator="true">,</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(n,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 的曼哈顿距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>r</mi><mo>+</mo><mi>c</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-r+c-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p>
<p>右下角坐标为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo separator="true">,</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n,m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>，到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 的曼哈顿距离为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>r</mi><mo>+</mo><mi>m</mi><mo>−</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">n-r+m-c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>。</p>
<p>那么只要求出这四个顶点到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>r</mi><mo separator="true">,</mo><mi>c</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(r,c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span></span></span> 的曼哈顿距离的最大值，即为答案。</p>
<p>时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span>。</p>
<hr>
<h3 id="code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Code</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span>：</h3>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
inline ll read() {
	register ll s=0,w=1;
	char ch=getchar();
	while(ch&lt;'0'||ch&gt;'9') {
		if(ch=='-')w=-1;
		ch=getchar();
	}
	while(ch&gt;='0'&amp;&amp;ch&lt;='9')s=s*10+ch-'0',ch=getchar();
	return s*w;
}
ll T;
ll n,m,r,c;
ll ans=0;
ll ans1=0,ans2=0;
int main() {
	T=read();
	while (T--) {
		n=read();m=read();r=read();c=read();
	    ans1=max(n-r+m-c,r+c-2);  //右下角与左上角到目标的曼哈顿距离的更大值 
	    ans2=max(r-1+m-c,n-r+c-1); //右上角与左下角到目标的曼哈顿距离的更大值  
	    ans=max(ans1,ans2); //最后求出答案 
		printf(&quot;%lld\n&quot;,ans);
		ans=0; //别忘了清零 
	}
	return 0;
}

</code></pre>
]]></content>
    </entry>
</feed>